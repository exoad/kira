package net.exoad.kira.compiler.frontend.parser

import net.exoad.kira.compiler.analysis.diagnostics.Diagnostics
import net.exoad.kira.compiler.frontend.lexer.Token
import net.exoad.kira.compiler.frontend.parser.ast.ASTNode
import net.exoad.kira.compiler.frontend.parser.ast.RootASTNode
import net.exoad.kira.compiler.frontend.parser.ast.declarations.*
import net.exoad.kira.compiler.frontend.parser.ast.elements.*
import net.exoad.kira.compiler.frontend.parser.ast.expressions.*
import net.exoad.kira.compiler.frontend.parser.ast.literals.*
import net.exoad.kira.compiler.frontend.parser.ast.statements.*
import net.exoad.kira.core.BuiltinIntrinsics
import net.exoad.kira.core.Keywords
import net.exoad.kira.source.SourceContext
import net.exoad.kira.source.SourceLocation
import net.exoad.kira.source.SourcePosition
import net.exoad.kira.utils.LocaleUtils
import java.util.*
import kotlin.math.max
import kotlin.properties.Delegates

/**
 * A semi-naive LL(k) parser that strays from rollbacks as much as possible. It takes
 * the tokens generated by the [net.exoad.kira.compiler.frontend.lexer.KiraLexer] and uses those to turn them into an AST.
 *
 * It will then pass this AST onto the [net.exoad.kira.compiler.analysis.semantic.KiraSemanticAnalyzer] to make sure the AST is
 * valid grammar.
 */
class KiraParser(private val context: SourceContext) {
    private val buffer = TokenBuffer(context.tokens)

    init {
        context.astOrigins = IdentityHashMap()
    }

    fun <T : ASTNode> putOrigin(
        node: T,
        location: SourcePosition = here(),
    ): T // returns the original value to facilitate with easier refactoring
    {
        context.astOrigins[node] = location
        return node
    }

    fun here(): SourcePosition {
        return peek().canonicalLocation
    }

    /**
     * Star method to call on [KiraParser] that will turn the passed in [context] into an AST.
     */
    fun parse() {
        val statements = mutableListOf<Statement>()
        while (!hereIs(Token.Type.S_EOF)) {
            statements.add(parseStatement(null))
        }
        if (statements.first().expr !is ModuleDecl) {
            Diagnostics.panic(
                "KiraParser::parse",
                "The first declaration of ${context.file} must be a module declaration!",
                context = context,
                location = SourcePosition(1, 1),
                selectorLength = max(1, context.findCanonicalLine(1).length)
            )
        }
        context.ast = RootASTNode(statements)
    }

    /**
     * Grabs the token at the [k]-th position (absolute).
     *
     * If you need relative positioning, take a look at [peek]
     */
    fun look(k: Int): Token {
        return buffer.peek(k - 1)
    }

    /**
     * Grabs the token [k] away from [pointer] (relative).
     *
     * If you need absolute positioning, take a look at [look]
     *
     * - also performs caching on the result for the same relative
     */
    private fun peek(k: Int = 0): Token {
        return buffer.peek(k)
    }

    /**
     * Moves the pointer forward to the next token and thus "consumes" the current token
     */
    private fun advancePointer(count: Int = 1) {
        buffer.advance(count)
    }

    fun tryInOrder(candidates: Array<Array<Token.Type>>, peekOffset: Int = 0): Array<Token.Type>? {
        if (candidates.isEmpty()) {
            return null
        }
        if (candidates.size == 1) {
            val candidate = candidates[0]
            for (i in candidate.indices) {
                if (candidate[i] != peek(i + peekOffset).type) return null
            }
            return candidate
        }
        for (candidate in candidates) {
            var match = true
            for (i in candidate.indices) {
                if (candidate[i] != peek(i + peekOffset).type) {
                    match = false
                    break
                }
            }
            if (match) {
                return candidate
            }
        }
        return null
    }

    private inline fun expectOptionalThenAdvance(token: Token.Type, ifOk: () -> Unit = { advancePointer() }) {
        if (hereIs(token)) {
            ifOk()
        }
    }

    private fun hereIs(type: Token.Type): Boolean {
        return type == peek().type
    }

    private fun expectModifiers(modifier: Map<Modifier, SourcePosition>?, scopes: WrappingContext) {
        val r = if (modifier == null || modifier.isEmpty()) {
            null
        } else {
            modifier.keys.toList().find { !it.wrappingContext.contains(scopes) }
        }
        if (r != null) {
            Diagnostics.panic(
                "KiraParser::expectModifiers",
                buildString {
                    append("The modifier ")
                    append(r.tokenType.diagnosticsName())
                    append(" cannot be applied to a ")
                    append(WrappingContext.CLASS)
                },
                location = modifier?.get(r),
                // this is so sketchy lmao, going through the values of a map to find the key which is THE OPPOSITE THING A MAP IS FOR LMAO
                // but since the program is already crashing here, doesnt really matter
                //
                // it just feels really sketchy and could fail at anytime ig
                selectorLength = Keywords.reserved.filterValues { it == r.tokenType }.keys.first().length,
                context = context
            )
        }
    }

    private inline fun expectThenAdvance(
        token: Token.Type,
        noinline onBad: (() -> Nothing)? = null,
        ifOk: () -> Unit = { advancePointer() }
    ) {
        if (!hereIs(token)) {
            if (onBad != null) {
                onBad()
            } else {
                Diagnostics.panic(
                    "KiraParser::expect",
                    buildString {
                        append("Expected ")
                        append(LocaleUtils.prependIndefiniteArticle(token.diagnosticsName().lowercase()))
                        append(" but got ")
                        append(LocaleUtils.prependIndefiniteArticle(peek().type.diagnosticsName()))
                    }, // we actually output the content underneath the pointer which is easier to see and depending on if it is like a symbol/keyword we output that else we output variable token contents accordingly
                    location = peek().canonicalLocation,
                    selectorLength = peek().content.length,
                    context = context
                )
            }
        } else {
            ifOk()
        }
    }

    private inline fun expectAnyOfThenAdvance(tokens: Array<Token.Type>, ifOk: () -> Unit = { advancePointer() }) {
        when {
            !tokens.contains(peek().type) ->
                Diagnostics.panic(
                    "KiraParser::expect",
                    buildString {
                        append("Expected any of ")
                        append(tokens.map { it.diagnosticsName() })
                        append(" but got ")
                        append(LocaleUtils.prependIndefiniteArticle(peek().type.diagnosticsName()))
                    },
                    location = peek().canonicalLocation,
                    context = context
                )

            else -> ifOk()
        }
    }

    fun parseStatement(modifier: Map<Modifier, SourcePosition>?): Statement {
        fun parseWithModifiers(): Statement {
            val baseLocation = here()
            val modifiers = parseModifiers()
            val expr = when (peek().type) {
                Token.Type.K_CLASS -> parseClassDecl(modifiers)
                Token.Type.K_ENUM -> parseEnumDecl(modifiers)
                Token.Type.K_TRAIT -> parseTraitDecl(modifiers)
                else -> parsePrimaryExpr(modifiers)
            }
            expectOptionalThenAdvance(Token.Type.S_SEMICOLON)
            return putOrigin(Statement(expr), baseLocation)
        }
        if (modifier != null && modifier.isNotEmpty()) {
            return parseWithModifiers()
        }
        return when (peek().type) {
            // parse keywords stuffs first if possible (like keyword first statements)
            Token.Type.K_RETURN -> parseReturnStatement()
            Token.Type.K_IF -> parseIfSelectionStatement()
            Token.Type.K_WHILE -> parseWhileIterationStatement()
            Token.Type.K_DO -> parseDoWhileIterationStatement()
            Token.Type.K_FOR -> parseForIterationStatement()
            Token.Type.K_USE -> parseUseStatement()
            Token.Type.K_BREAK -> parseBreakStatement()
            Token.Type.K_CONTINUE -> parseContinueStatement()
            in Token.Type.modifiers -> parseWithModifiers()
            Token.Type.K_CLASS -> // this part covers the case where the class decl has no modifiers on it. THIS CONDITION NEEDS TO BE UNDER THE PREVIOUS CONDITION
            {
                val baseLocation = here()
                val expr = parseClassDecl(null)
                expectOptionalThenAdvance(Token.Type.S_SEMICOLON)
                return putOrigin(Statement(expr), baseLocation)
            }

            Token.Type.K_TRAIT -> {
                val baseLocation = here()
                val expr = parseTraitDecl(null)
                expectOptionalThenAdvance(Token.Type.S_SEMICOLON)
                return putOrigin(Statement(expr), baseLocation)
            }

            Token.Type.K_ENUM -> {
                val baseLocation = here()
                val expr = parseEnumDecl(null)
                expectOptionalThenAdvance(Token.Type.S_SEMICOLON)
                return putOrigin(Statement(expr), baseLocation)
            }

            else -> {
                val baseLocation = here()
                val expr = parseExpr()
                // todo: idk wtf this panic message is for ?
//                if(hereIs( Token.Type.L_INTEGER || hereIs( Token.Type.IDENTIFIER)
//                {
//                    Diagnostics.panic(
//                        "KiraParser::parseStatement",
//                        "Unexpected token '${peek().content}'",
//                        location = peek().canonicalLocation,
//                        selectorLength = peek().content.length,
//                        context = context
//                    )
//                }
                expectOptionalThenAdvance(Token.Type.S_SEMICOLON)
                return putOrigin(Statement(expr), baseLocation)
            }
        }
    }

    /**
     * Used to parse a statement between two `{}` AKA a block.
     */
    private fun parseStatementBlock(): List<Statement> {
        expectThenAdvance(Token.Type.S_OPEN_BRACE)
        val statements = mutableListOf<Statement>()
        while (!hereIs(Token.Type.S_CLOSE_BRACE) && !hereIs(Token.Type.S_EOF)) {
            statements.add(parseStatement(null))
        }
        expectThenAdvance(Token.Type.S_CLOSE_BRACE)
        return statements
    }

    fun parseReturnStatement(): Statement // y dont they just call it a return expr? lol beats me tho, just another way to represent an astnode
    {
        val origin = here()
        expectThenAdvance(Token.Type.K_RETURN)
        val expr = parseExpr()
        expectOptionalThenAdvance(Token.Type.S_SEMICOLON)
        return putOrigin(ReturnStatement(expr), origin)
    }

    fun parseBreakStatement(): Statement {
        val origin = here()
        expectThenAdvance(Token.Type.K_BREAK)
        return putOrigin(BreakStatement(), origin)
    }

    fun parseContinueStatement(): Statement {
        val origin = here()
        expectThenAdvance(Token.Type.K_CONTINUE)
        return putOrigin(ContinueStatement(), origin)
    }

    fun parseForIterationStatement(): Statement {
        val origin = here()
        expectThenAdvance(Token.Type.K_FOR)
        expectThenAdvance(Token.Type.S_OPEN_PARENTHESIS)
        // todo: might need a better warning message here, since the initializer needs to be present
        expectThenAdvance(Token.Type.K_MODIFIER_MUTABLE)
        val identifier = parseIdentifier()
        expectThenAdvance(Token.Type.S_COLON)
        val target = parseExpr()
        expectThenAdvance(Token.Type.S_CLOSE_PARENTHESIS)
        val body = parseStatementBlock()
        return putOrigin(ForIterationStatement(ForIterationExpr(identifier, target), body), origin)
    }

    fun parseWhileIterationStatement(): Statement {
        val origin = here()
        expectThenAdvance(Token.Type.K_WHILE)
        expectThenAdvance(Token.Type.S_OPEN_PARENTHESIS)
        val condition = parseExpr()
        expectThenAdvance(Token.Type.S_CLOSE_PARENTHESIS)
        return putOrigin(WhileIterationStatement(condition, parseStatementBlock()), origin)
    }

    fun parseDoWhileIterationStatement(): Statement {
        val origin = here()
        expectThenAdvance(Token.Type.K_DO)
        val statements = parseStatementBlock()
        expectThenAdvance(Token.Type.K_WHILE)
        expectThenAdvance(Token.Type.S_OPEN_PARENTHESIS)
        val condition = parseExpr()
        expectThenAdvance(Token.Type.S_CLOSE_PARENTHESIS)
        expectOptionalThenAdvance(Token.Type.S_SEMICOLON)
        return putOrigin(DoWhileIterationStatement(condition, statements), origin)
    }

    fun parseIfSelectionStatement(): Statement {
        val origin = here()
        expectThenAdvance(Token.Type.K_IF)
        expectThenAdvance(Token.Type.S_OPEN_PARENTHESIS)
        val condition = parseExpr()
        expectThenAdvance(Token.Type.S_CLOSE_PARENTHESIS)
        val thenStatements = parseStatementBlock()
        val branches = mutableListOf<IfElseBranchStatementNode>()
        while (hereIs(Token.Type.K_ELSE)) {
            advancePointer() // consume "else" part: not useful
            when (peek().type) // before i started with always making that "else-if" part was just "elif" which made parsing a lot easier, but i can see why it really isnt that necessary LOL
            {
                Token.Type.K_IF -> // "else-if" part
                {
                    val subOrigin = peek().canonicalLocation
                    advancePointer()
                    expectThenAdvance(Token.Type.S_OPEN_PARENTHESIS)
                    val deepCondition = parseExpr()
                    expectThenAdvance(Token.Type.S_CLOSE_PARENTHESIS)
                    branches.add(putOrigin(ElseIfBranchStatement(deepCondition, parseStatementBlock()), subOrigin))
                }

                else -> branches.add(putOrigin(ElseBranchStatement(parseStatementBlock())))
            }
        }
        return putOrigin(IfSelectionStatement(condition, thenStatements, branches), origin)
    }

    // handles special cases with closing angle which are not tokenized together during the lexer (we use angle brackets for generics smh)
    private fun tryBinaryOps(peekOffset: Int = 0): Array<Token.Type>? {
        return tryInOrder(
            arrayOf(
                arrayOf(Token.Type.S_CLOSE_ANGLE, Token.Type.S_CLOSE_ANGLE, Token.Type.S_CLOSE_ANGLE),
                arrayOf(Token.Type.S_CLOSE_ANGLE, Token.Type.S_CLOSE_ANGLE),
                arrayOf(Token.Type.S_CLOSE_ANGLE, Token.Type.S_EQUAL)
            ),
            peekOffset
        )
    }

    fun parseExpr(minPrecedence: Int = 0): Expr {
        val origin = here()
        var left: Expr = parsePrimaryOrUnaryExpr()
        while (true) {
            val binOpTokens = tryBinaryOps() ?: arrayOf(peek().type)
            val binaryOpType = BinaryOp.byTokenTypeMaybe(binOpTokens)
            if (binaryOpType == null || binaryOpType.precedence < minPrecedence) {
                break
            }
            repeat(binOpTokens.size)
            {
                advancePointer() // consume the operators
            }
            // the following binary operators require special parsing of the right hand side so they are put before the others
            if (binaryOpType == BinaryOp.TYPE_CHECK) {
                val right = parseType()
                return putOrigin(TypeCheckExpr(left, right), origin)
            }
            if (binaryOpType == BinaryOp.TYPE_CAST) {
                val right = parseType()
                return putOrigin(TypeCastExpr(left, right), origin)
            }
            val nextMinPrecedence = binaryOpType.precedence + 1
            val right = parseExpr(nextMinPrecedence)
            left = when (binaryOpType) {
                BinaryOp.CONJUNCTIVE_DOT -> MemberAccessExpr(left, right)
                BinaryOp.RANGE -> RangeExpr(left, right)
                else -> BinaryExpr(left, right, binaryOpType)
            }
        }
        return putOrigin(left, origin)
    }

    private fun parsePrimaryOrUnaryExpr(): Expr {
        return when {
            UnaryOp.byTokenTypeMaybe(peek().type) != null -> parseUnaryExpr()
            else -> parsePrimaryExpr(null)
        }
    }

    fun parsePrimaryExpr(modifier: Map<Modifier, SourcePosition>?): Expr {
        return when (peek().type) {
            // lowkey this hard coded switch statement seems like the best approach, but i get that
            // itch that it will be like redundancy and edge case hell
            Token.Type.L_FLOAT -> parseFloatLiteral()
            Token.Type.L_INTEGER -> parseIntegerLiteral()
            Token.Type.L_STRING -> parseStringLiteral()
            Token.Type.L_NULL -> parseNullLiteral()
            Token.Type.S_OPEN_BRACE -> parseMapLiteral(false)
            Token.Type.S_OPEN_BRACKET -> parseArrayLiteral()
            Token.Type.K_MODIFIER_MUTABLE ->
                when (peek(1).type) {
                    Token.Type.S_OPEN_BRACKET -> {
                        advancePointer() // consumes the previous modifier (mutable)
                        parseListLiteral()
                    }

                    Token.Type.S_OPEN_BRACE -> {
                        advancePointer() // consume the mutable modifier
                        parseMapLiteral(true)
                    }

                    else -> Diagnostics.panic(
                        "KiraParser::parsePrimaryExpr",
                        "${Token.Type.K_MODIFIER_MUTABLE} is only allowed on arrays at this position",
                        context = context,
                        location = peek().canonicalLocation,
                        selectorLength = peek().content.length
                    )
                }

            Token.Type.S_AT ->
                when (peek(1).type) {
                    Token.Type.IDENTIFIER -> {
                        advancePointer()
                        parseIntrinsicExpr()
                    }

                    else -> Diagnostics.panic(
                        "KiraParser::parsePrimaryExpr",
                        "Intrinsics must be followed by an identifier. Instead, got '${
                            LocaleUtils.prependIndefiniteArticle(peek(1).type.diagnosticsName())
                        }'",
                        location = here(),
                        selectorLength = peek(1).content.length,
                        context = context
                    )
                }

            Token.Type.K_WITH -> parseWithExpr()
            Token.Type.K_MODULE -> parseModuleDecl()
            Token.Type.K_FX -> parseFunctionDecl(modifier)
            Token.Type.IDENTIFIER ->
                when (peek(1).type) {
                    Token.Type.S_OPEN_PARENTHESIS -> {
                        if (modifier?.isNotEmpty() ?: false) {
                            Diagnostics.panic(
                                "KiraParser::parseFunctionCallExpr",
                                "Modifiers are not expected on function calls.",
                                location = here(),
                                selectorLength = 1,
                                context = context
                            )
                        }
                        parseFunctionCallExpr()
                    }

                    else -> parseIdentifierExpr(modifier)
                }

            Token.Type.L_TRUE_BOOL, Token.Type.L_FALSE_BOOL -> parseBoolLiteral()
            Token.Type.OP_SUB, Token.Type.OP_ADD, Token.Type.S_BANG, Token.Type.S_TILDE -> parseUnaryExpr()
            Token.Type.S_OPEN_PARENTHESIS -> {
                advancePointer()
                val expr = parseExpr()
                expectThenAdvance(Token.Type.S_CLOSE_PARENTHESIS)
                expr
            }

            else ->
                Diagnostics.panic(
                    "KiraParser::parsePrimaryExpr",
                    "${LocaleUtils.prependIndefiniteArticle(peek().type.diagnosticsName())} is not allowed here.",
                    location = peek().canonicalLocation,
                    selectorLength = peek().content.length,
                    context = context
                )
        }
    }

    fun parseModuleDecl(): Decl {
        val origin = here()
        expectThenAdvance(Token.Type.K_MODULE)
        val uri = parseStringLiteral()
        return putOrigin(ModuleDecl(uri), origin)
    }

    fun parseUnaryExpr(): Expr {
        val origin = here()
        val operatorToken = peek()
        expectAnyOfThenAdvance(UnaryOp.entries.map { it.tokenType }.toTypedArray())
        val operand = parseExpr(UnaryOp.NEG.precedence)
        return putOrigin(UnaryExpr(UnaryOp.byTokenTypeMaybe(operatorToken.type) {
            Diagnostics.panic(
                "UnaryOperator::byTokenTypeMaybe",
                "$operatorToken is not an unary operator!",
                context = context,
                location = operatorToken.canonicalLocation,
                selectorLength = operatorToken.content.length
            )
        }!!, operand), origin)
    }

    fun parseBinaryExpr(): Expr {
        val origin = here()
        var left = parsePrimaryExpr(null)
        while (Token.Type.isBinaryOperator(peek().type)) {
            val operator = peek()
            advancePointer()
            val right = parsePrimaryExpr(null)
            left = when (operator.type) {
                Token.Type.S_DOT -> MemberAccessExpr(left, right)
                else -> BinaryExpr(
                    left,
                    right,
                    BinaryOp.byTokenTypeMaybe(arrayOf(operator.type)) {
                        Diagnostics.panic(
                            "BinaryOperator::byTokenTypeMaybe",
                            "$operator is not a binary operator!",
                            context = context,
                            location = operator.canonicalLocation,
                            selectorLength = operator.content.length
                        )
                    }!!
                )
            }
        }
        return putOrigin(left, origin)
    }

    fun parseWithExpr(): Expr {
        val origin = here()
        expectThenAdvance(Token.Type.K_WITH)
        expectThenAdvance(Token.Type.S_OPEN_BRACE)
        val members = mutableListOf<WithExprMember>()
        while (!hereIs(Token.Type.S_CLOSE_BRACE) && !hereIs(Token.Type.S_EOF)) {
            if (members.isNotEmpty()) {
                expectThenAdvance(Token.Type.S_COMMA)
            }
            val subOrigin = peek().canonicalLocation
            val identifier = parseIdentifier()
            expectThenAdvance(Token.Type.S_EQUAL)
            val expr = parseExpr()
            members.add(putOrigin(WithExprMember(identifier, expr), subOrigin))
        }
        expectThenAdvance(Token.Type.S_CLOSE_BRACE)
        return putOrigin(WithExpr(members), origin)
    }

    fun parseIntrinsicExpr(marker: Boolean = false): IntrinsicExpr {
        // the current implementation of intrinsic calls act more like preprocessor directives in other languages
        // it just finds and replaces in whatever process after it uses it
        //
        // for a better way we could just add it as a find and replace method, but that just feels lame, but whatever.
        val startLoc = peek().canonicalLocation
        if (hereIs(Token.Type.S_AT)) {
            advancePointer()
        }
        val identifier = peek().content
        expectThenAdvance(Token.Type.IDENTIFIER) // this is scuffed but lmao
        val parameters = mutableListOf<Expr>()
        if (!marker && hereIs(Token.Type.S_OPEN_PARENTHESIS)) {
            expectThenAdvance(Token.Type.S_OPEN_PARENTHESIS)
            while (!hereIs(Token.Type.S_CLOSE_PARENTHESIS) && !hereIs(Token.Type.S_EOF)) {
                if (parameters.isNotEmpty()) {
                    expectThenAdvance(Token.Type.S_COMMA)
                }
                parameters.add(parseExpr())
            }
            expectThenAdvance(Token.Type.S_CLOSE_PARENTHESIS)
        }
        val findVal = BuiltinIntrinsics.entries.find { it.rep == identifier }
        return when (findVal != null) {
            true -> putOrigin(
                IntrinsicExpr(
                    findVal,
                    SourceLocation(
                        peek().canonicalLocation.lineNumber,
                        peek().canonicalLocation.column,
                        context.file
                    ),
                    parameters
                ), startLoc
            )

            else -> Diagnostics.panic(
                "KiraParser::parseIntrinsicCallExpr",
                "An intrinsic named '${identifier}' does not exist.",
                location = startLoc,
                selectorLength = identifier.length,
                context = context
            )
        }
    }

    fun parseFunctionDeclParameters(): List<FunctionDeclParameterExpr> {
        // could this be also adapted for future implementations of function notations ??
        val parameters = mutableListOf<FunctionDeclParameterExpr>()
        expectThenAdvance(Token.Type.S_OPEN_PARENTHESIS)
        while (!hereIs(Token.Type.S_CLOSE_PARENTHESIS) && !hereIs(Token.Type.S_EOF)) {
            if (parameters.isNotEmpty()) {
                expectThenAdvance(Token.Type.S_COMMA)
            }
            val modifiers = parseModifiers()
            val origin = here()
            val name = parseIdentifier()
            expectThenAdvance(Token.Type.S_COLON)
            val type = parseType()
            parameters.add(putOrigin(FunctionDeclParameterExpr(name, type, modifiers.keys.toList()), origin))
        }
        expectThenAdvance(Token.Type.S_CLOSE_PARENTHESIS)
        return parameters
    }

    private fun parseFunctionDecl(modifier: Map<Modifier, SourcePosition>?): FunctionDecl {
        val origin = here()
        expectModifiers(modifier, WrappingContext.FUNCTION)
        expectThenAdvance(Token.Type.K_FX)
        var functionName: Identifier = AnonymousIdentifier
        if (hereIs(Token.Type.S_AT)) {
            functionName = parseIntrinsicExpr(marker = true)
        } else if (hereIs(Token.Type.IDENTIFIER)) {
            functionName = parseIdentifier()
        }
        val functionLiteral = parseFunctionLiteral()
        return putOrigin(
            FunctionDecl(
                functionName,
                functionLiteral,
                modifier?.keys?.toList() ?: emptyList()
            ), origin
        )
    }

    private fun parseFunctionCallParameter(): Pair<List<FunctionCallNamedParameterExpr>, List<FunctionCallPositionalParameterExpr>> {
        val named = mutableListOf<FunctionCallNamedParameterExpr>()
        val positional = mutableListOf<FunctionCallPositionalParameterExpr>()
        var positionalIndex = 0
        var seenNamed = false
        expectThenAdvance(Token.Type.S_OPEN_PARENTHESIS)
        while (!hereIs(Token.Type.S_CLOSE_PARENTHESIS) && !hereIs(Token.Type.S_EOF)) {
            if (positional.isNotEmpty() || named.isNotEmpty()) {
                expectThenAdvance(Token.Type.S_COMMA)
            }
            val startToken = peek()
            if (hereIs(Token.Type.IDENTIFIER) && peek(1).type == Token.Type.S_EQUAL) {
                seenNamed = true
                val origin = here()
                val identifier = parseIdentifier()
                expectThenAdvance(Token.Type.S_EQUAL)
                val expr = parseExpr()
                if (expr is CompoundAssignmentExpr || expr is AssignmentExpr) {
                    Diagnostics.panic(
                        "KiraParser::parseFunctionCallParameter",
                        "Cannot use assignment expressions in function call parameters",
                        context = context,
                        location = startToken.canonicalLocation,
                        selectorLength = startToken.content.length
                    )
                }
                named.add(putOrigin(FunctionCallNamedParameterExpr(identifier, expr), origin))
            } else {
                if (seenNamed) {
                    Diagnostics.panic(
                        "KiraParser::parseFunctionCallParameter",
                        "Positional arguments must come before named arguments",
                        context = context,
                        location = startToken.canonicalLocation,
                        selectorLength = startToken.content.length
                    )
                }
                val origin = here()
                val expr = parseExpr()
                if (expr is CompoundAssignmentExpr || expr is AssignmentExpr) {
                    Diagnostics.panic(
                        "KiraParser::parseFunctionCallParameter",
                        "Cannot use assignment expressions in function call parameters",
                        context = context,
                        location = startToken.canonicalLocation,
                        selectorLength = startToken.content.length
                    )
                }
                positional.add(putOrigin(FunctionCallPositionalParameterExpr(positionalIndex++, expr), origin))
            }
        }
        expectThenAdvance(Token.Type.S_CLOSE_PARENTHESIS)
        return named to positional
    }

    private fun parseFunctionCallExpr(): FunctionCallExpr {
        val origin = here()
        val identifier = parseIdentifier()
        val parameters = parseFunctionCallParameter()
        return putOrigin(FunctionCallExpr(identifier, parameters.second, parameters.first), location = origin)
    }

    private fun parseIdentifierExpr(modifier: Map<Modifier, SourcePosition>?): Expr {
        if (tryCompoundAssignmentOperators(1) != null) // skip the identifier with peekoffset +1 (similar to why we also peek(1) below in the when statement
        {
            return parseCompoundAssignmentExpr()
        }
        return when (peek(1).type) {
            Token.Type.S_EQUAL -> parseAssignmentExpr()
            Token.Type.S_COLON -> parseVariableDecl(modifier)
            else -> parseIdentifier()
        }
    }

    fun parseUseStatement(): Statement {
        val origin = here()
        expectThenAdvance(Token.Type.K_USE)
        val uri = parseStringLiteral()
        return putOrigin(UseStatement(uri), origin)
    }

    // helper function for dealing with compound assignment operators that utilize the closing angle bracket (which is a pain to disambiguate) <-- this is a fucking word!?!?!
    fun tryCompoundAssignmentOperators(peekOffset: Int = 0): Array<Token.Type>? {
        return tryInOrder(
            arrayOf(
                arrayOf(
                    Token.Type.S_CLOSE_ANGLE, Token.Type.S_CLOSE_ANGLE, Token.Type.S_CLOSE_ANGLE, Token.Type.S_EQUAL
                ), arrayOf(
                    Token.Type.S_CLOSE_ANGLE, Token.Type.S_CLOSE_ANGLE, Token.Type.S_EQUAL
                )
            ),
            peekOffset,
        )
    }

    fun parseCompoundAssignmentExpr(): CompoundAssignmentExpr {
        val origin = here()
        val left = parseIdentifier() // todo: allow for more than just identifiers for now
        val opTokens: Array<Token.Type> = tryCompoundAssignmentOperators() ?: arrayOf(peek().type)
        val op = CompoundAssignmentExpr.findBinaryOp(opTokens)
        repeat(opTokens.size) { advancePointer() }
        val right = parseExpr()
        return putOrigin(CompoundAssignmentExpr(left, op!!, right), origin)
    }

    fun parseAssignmentExpr(): AssignmentExpr {
        val origin = here()
        val identifier = parseIdentifier()
        expectThenAdvance(Token.Type.S_EQUAL)
        val value = parseBinaryExpr()
        return putOrigin(AssignmentExpr(identifier, value), origin)
    }

    fun parseEnumMemberExpr(): EnumMemberExpr {
        val origin = here()
        val name = parseIdentifier()
        var value: DataLiteral<*>? = null
        if (hereIs(Token.Type.S_EQUAL)) {
            expectThenAdvance(Token.Type.S_EQUAL)
            val start = peek()
            val parseValue = parsePrimaryExpr(null)
            if (parseValue !is SimpleLiteral && parseValue !is DataLiteral<*>) {
                Diagnostics.panic(
                    "KiraParser::parseEnumMemberExpr",
                    "Only simple literals are allowed as enum values. That is strings, booleans, floats, and integers.",
                    location = start.canonicalLocation,
                    selectorLength = start.content.length,
                    context = context
                )
            }
            value = parseValue as DataLiteral<*>
        }
        return putOrigin(EnumMemberExpr(name, value), origin)
    }

    fun parseEnumDecl(modifier: Map<Modifier, SourcePosition>?): EnumDecl {
        expectModifiers(modifier, WrappingContext.ENUM)
        advancePointer() // consume 'enum'
        val origin = here()
        val name = parseIdentifier() // we only allow simple names, not complex names on enums, cuz there is no point
        expectThenAdvance(Token.Type.S_OPEN_BRACE)
        val members = mutableListOf<EnumMemberExpr>()
        while (!hereIs(Token.Type.S_CLOSE_BRACE) && !hereIs(Token.Type.S_EOF)) {
            members.add(parseEnumMemberExpr())
            if (!hereIs(Token.Type.S_CLOSE_BRACE)) {
                expectThenAdvance(Token.Type.S_COMMA)
            }
        }
        expectThenAdvance(Token.Type.S_CLOSE_BRACE)
        return putOrigin(EnumDecl(name, members.toTypedArray(), modifier?.keys?.toList() ?: emptyList()), origin)
    }

    fun parseClassDecl(modifier: Map<Modifier, SourcePosition>?): ClassDecl {
        expectModifiers(modifier, WrappingContext.CLASS)
        advancePointer() //consume the class keyword
        val origin = here()
        val className = parseType()
        var parentType: Type? = null
        if (hereIs(Token.Type.S_COLON)) // inheritance here baby ;D
        {
            advancePointer()
            parentType = parseType()
        }
        if (!hereIs(Token.Type.S_OPEN_BRACE)) {
            return putOrigin(
                ClassDecl(className, modifier?.keys?.toList() ?: emptyList(), emptyList(), parentType),
                origin
            )
        }
        expectThenAdvance(Token.Type.S_OPEN_BRACE)
        val members = mutableListOf<FirstClassDecl>()
        while (!hereIs(Token.Type.S_CLOSE_BRACE) && !hereIs(Token.Type.S_EOF)) {
            val memberModifiers = parseModifiers()
            expectModifiers(memberModifiers, WrappingContext.CLASS_MEMBER)
            members.add(
                if (hereIs(Token.Type.S_OPEN_PARENTHESIS)) // check for simple/anonymous function literals
                {
                    Diagnostics.panic(
                        "KiraParser::parseClassDecl",
                        "Anonymous Function Literals are not allowed by themselves in a class.",
                        location = peek().canonicalLocation,
                        selectorLength = peek().content.length,
                        context = context
                    )
                } else if (peek(1).type == Token.Type.S_COLON) {
                    val valDecl = parseVariableDecl(memberModifiers)
                    expectOptionalThenAdvance(Token.Type.S_SEMICOLON)
                    valDecl
                } else {
                    parseFunctionDecl(memberModifiers) // if this throws, then it is 99.99% user error
                }
            )
        }
        expectThenAdvance(Token.Type.S_CLOSE_BRACE)
        return putOrigin(ClassDecl(className, modifier?.keys?.toList() ?: emptyList(), members, parentType), origin)
    }

    fun parseTraitDecl(modifier: Map<Modifier, SourcePosition>?): TraitDecl {
        expectModifiers(modifier, WrappingContext.TRAIT)
        val baseLocation = here()
        var seenAnonymous = false
        expectThenAdvance(Token.Type.K_TRAIT)
        val name = parseType()
        expectThenAdvance(Token.Type.S_OPEN_BRACE)
        val members = mutableListOf<FunctionDecl>()
        while (!hereIs(Token.Type.S_CLOSE_BRACE) && !hereIs(Token.Type.S_EOF)) {
            val memberModifiers = parseModifiers()
            expectModifiers(memberModifiers, WrappingContext.TRAIT_MEMBER)
            val memberExpr = parseFunctionDecl(memberModifiers)
            // check if we have seen an anonymous function against this member (we only permit one anonymous function)
            if (memberExpr.isAnonymous()) {
                if (seenAnonymous) {
                    Diagnostics.panic(
                        "KiraParser::parseTraitDecl",
                        "Traits only allow 1 anonymous function. Either give this function name or remove others.",
                        context = context,
                        location = context.astOrigins[memberExpr],
                        selectorLength = context.findCanonicalLine(context.astOrigins[memberExpr]!!.lineNumber).length
                    )
                }
                seenAnonymous = true
            }
            members.add(memberExpr)
        }
        expectThenAdvance(Token.Type.S_CLOSE_BRACE)
        if (members.isEmpty()) {
            Diagnostics.Logging.warn(
                "KiraParser::parseTraitDecl",
                "Found trait $name with no members."
            )
        }
        return putOrigin(TraitDecl(name, modifier?.keys?.toTypedArray() ?: emptyArray(), members), baseLocation)
    }

    fun parseVariableDecl(modifier: Map<Modifier, SourcePosition>?): VariableDecl {
        expectModifiers(modifier, WrappingContext.VARIABLE)
        val origin = here()
        val identifier = parseIdentifier()
        expectThenAdvance(Token.Type.S_COLON)
        val type = parseType()
        var value: Expr? = null
        if (hereIs(Token.Type.S_EQUAL)) {
            advancePointer()
            value = parseExpr()
        }
        return putOrigin(VariableDecl(identifier, type, value, modifier?.keys?.toList() ?: emptyList()), origin)
    }

    fun parseNullLiteral(): NullLiteral {
        val origin = here()
        expectThenAdvance(Token.Type.L_NULL)
        return putOrigin(NullLiteral, origin)
    }

    fun parseStringLiteral(): StringLiteral {
        val value = peek().content
        val origin = here()
        expectThenAdvance(Token.Type.L_STRING)
        return putOrigin(StringLiteral(value), origin)
    }

    fun parseArrayLiteral(): ArrayLiteral {
        val origin = here()
        expectThenAdvance(Token.Type.S_OPEN_BRACKET)
        val elements = mutableListOf<Expr>()
        while (!hereIs(Token.Type.S_CLOSE_BRACKET) && !hereIs(Token.Type.S_EOF)) {
            elements.add(parsePrimaryExpr(null))
            if (!hereIs(Token.Type.S_CLOSE_BRACKET)) {
                expectThenAdvance(Token.Type.S_COMMA)
            }
        }
        expectThenAdvance(Token.Type.S_CLOSE_BRACKET)
        return putOrigin(ArrayLiteral(elements.toTypedArray()), origin)
    }

    fun parseListLiteral(): ListLiteral {
        expectThenAdvance(Token.Type.K_MODIFIER_MUTABLE)
        val origin = here()
        expectThenAdvance(Token.Type.S_OPEN_BRACKET)
        val elements = mutableListOf<Expr>()
        while (!hereIs(Token.Type.S_CLOSE_BRACKET) && !hereIs(Token.Type.S_EOF)) {
            elements.add(parsePrimaryExpr(null))
            if (!hereIs(Token.Type.S_CLOSE_BRACKET)) {
                expectThenAdvance(Token.Type.S_COMMA)
            }
        }
        expectThenAdvance(Token.Type.S_CLOSE_BRACKET)
        return putOrigin(ListLiteral(elements), origin)
    }

    fun parseMapLiteral(mutable: Boolean): MapLiteral {
        val origin = here()
        expectThenAdvance(Token.Type.S_OPEN_BRACE)
        val elements = mutableMapOf<Expr, Expr>()
        while (!hereIs(Token.Type.S_CLOSE_BRACE) && !hereIs(Token.Type.S_EOF)) {
            val key = parseExpr()
            expectThenAdvance(Token.Type.S_COLON)
            val value = parseExpr()
            elements[key] = value
            if (!hereIs(Token.Type.S_CLOSE_BRACE)) {
                expectThenAdvance(Token.Type.S_COMMA)
            }
        }
        expectThenAdvance(Token.Type.S_CLOSE_BRACE)
        return putOrigin(MapLiteral(elements, mutable), origin)
    }

    fun parseIntegerLiteral(): IntegerLiteral {
        var value by Delegates.notNull<Long>()
        val origin = here()
        try {
            value = peek().content.toLong()
        } catch (e: Exception) {
            Diagnostics.panic(
                "KiraParser::parseIntegerLiteral",
                "Unable to read '${peek().content}' as an integer literal",
                cause = e,
                location = origin,
                selectorLength = peek().content.length,
                context = context
            )
        }
        expectThenAdvance(Token.Type.L_INTEGER)
        return putOrigin(IntegerLiteral(value), origin)
    }

    fun parseFloatLiteral(): FloatLiteral {
        var value by Delegates.notNull<Double>()
        val origin = here()
        try {
            value = peek().content.toDouble()
        } catch (e: Exception) {
            Diagnostics.panic(
                "KiraParser::parseIntegerLiteral",
                "Unable to read '${peek().content}' as an integer literal",
                cause = e,
                location = peek().canonicalLocation,
                selectorLength = peek().content.length,
                context = context
            )
        }
        expectThenAdvance(Token.Type.L_FLOAT)
        return putOrigin(FloatLiteral(value), origin)
    }

    fun parseBoolLiteral(): BoolLiteral {
        var value by Delegates.notNull<Boolean>()
        val origin = here()
        try {
            value = peek().content.toBooleanStrict()
        } catch (e: Exception) {
            Diagnostics.panic(
                "KiraParser::parseBoolLiteral",
                "Unable to read ${peek().content} as a bool literal",
                cause = e,
                location = origin,
                context = context
            )
        }
        expectAnyOfThenAdvance(arrayOf(Token.Type.L_TRUE_BOOL, Token.Type.L_FALSE_BOOL))
        return putOrigin(BoolLiteral(value), origin)
    }

    fun parseFunctionLiteral(): FunctionLiteral {
        val origin = here()
        val params = parseFunctionDeclParameters()
        expectThenAdvance(Token.Type.S_COLON)
        val returnType = parseType()
        var body: List<Statement>? = null
        if (hereIs(Token.Type.S_OPEN_BRACE)) {
            body = parseStatementBlock()
        } else {
            expectThenAdvance(Token.Type.S_SEMICOLON, onBad = {
                Diagnostics.panic(
                    "Kira::parseFunctionLiteral",
                    "Function stubs must end in a semi-colon! Else, specify the full function block.",
                    context = context,
                    location = here(),
                    selectorLength = 1
                )
            })
        }
        return putOrigin(FunctionLiteral(returnType, params, body), origin)
    }

    fun parseIdentifier(): Identifier {
        val loc = peek().canonicalLocation
        val value = peek().content
        expectThenAdvance(Token.Type.IDENTIFIER)
        return putOrigin(Identifier(value), loc)
    }

    private fun parseTypeParameter(): Type {
        var bound: Type? = null
        fun acquireTypeBound() {
            if (hereIs(Token.Type.S_COLON)) {
                advancePointer()
                bound = parseType()
            }
        }
        if (hereIs(Token.Type.S_OPEN_BRACKET)) { // branch for variadic type parameters
            advancePointer()
            val baseLocation = here()
            val baseIdentifier = parseIdentifier()
            acquireTypeBound()
            expectThenAdvance(Token.Type.S_CLOSE_BRACKET)
            return putOrigin(VariadicTypeParameter(baseIdentifier, bound), baseLocation)
        }
        val baseLocation = here()
        val baseIdentifier = parseIdentifier()
        acquireTypeBound()
        return putOrigin(Type(baseIdentifier, bound, emptyList()), baseLocation)
    }


    fun parseType(): Type {
        val baseLocation = here()
        val baseIdentifier = parseIdentifier()
        if (!hereIs(Token.Type.S_OPEN_ANGLE)) {
            return putOrigin(Type(baseIdentifier), baseLocation)
        }
        expectThenAdvance(Token.Type.S_OPEN_ANGLE)
        val children = mutableListOf<Type>()
        while (!hereIs(Token.Type.S_CLOSE_ANGLE) && !hereIs(Token.Type.S_EOF)) {
            val param = parseTypeParameter()
            if (param is VariadicTypeParameter && !hereIs(Token.Type.S_CLOSE_ANGLE)) {
                Diagnostics.panic(
                    "Kira::parseType",
                    "A variadic type bound must always be at the end of the type parameter list.",
                    context = context,
                    location = context.astOrigins[param] ?: here(),
                    selectorLength = 1
                )
            }
            children.add(param)
            if (!hereIs(Token.Type.S_CLOSE_ANGLE)) {
                expectThenAdvance(Token.Type.S_COMMA)
            }
        }
        expectThenAdvance(Token.Type.S_CLOSE_ANGLE)
        return putOrigin(Type(baseIdentifier, null, children), baseLocation)

    }

    fun parseModifiers(): Map<Modifier, SourcePosition> {
        val modifier = mutableMapOf<Modifier, SourcePosition>()
        while (peek().type in Token.Type.modifiers) {
            val currentModifier = Modifier.byTokenTypeMaybe(peek().type) {
                Diagnostics.panic(
                    "KiraParser::parseModifiers",
                    "${peek()} is not a valid modifier",
                    context = context,
                    location = peek().canonicalLocation,
                    selectorLength = peek().content.length,
                )
            }
            modifier[currentModifier]?.let {
                Diagnostics.panic(
                    "KiraParser::parseModifiers", "Duplicate modifier at ${peek().canonicalLocation}",
                    context = context,
                    location = peek().canonicalLocation,
                    selectorLength = peek().content.length,
                )
            }
            modifier[currentModifier!!] = peek().canonicalLocation
            advancePointer()
        }
        return modifier
    }
}