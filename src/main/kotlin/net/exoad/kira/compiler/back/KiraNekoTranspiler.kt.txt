package net.exoad.kira.compiler.back

import net.exoad.kira.Builtin
import net.exoad.kira.compiler.Diagnostics
import net.exoad.kira.compiler.GeneratedProvider
import net.exoad.kira.compiler.front.TokensProvider
import net.exoad.kira.compiler.front.elements.*
import net.exoad.kira.compiler.front.exprs.*
import net.exoad.kira.compiler.front.exprs.decl.VariableDecl
import net.exoad.kira.compiler.front.statements.*
import java.io.File

object KiraNekoTranspiler : KiraTranspiler(
    canonicalName = "Kira to NekoVM Transpiler",
    targetLanguage = "Neko",
    fileExtension = "neko"
)
{
    val sb = StringBuilder()

    override fun visitStatement(statementNode: StatementNode)
    {
        statementNode.expr.accept(this)
        sb.append(";")
    }

    override fun visitIfSelectionStatement(ifSelectionStatement: IfSelectionStatement)
    {
        sb.append("if(")
        ifSelectionStatement.expr.accept(this)
        sb.append("){")
        ifSelectionStatement.thenStatements.forEach { it.accept(this) }
        sb.append("}")
    }

    override fun visitIfElseIfBranchStatement(ifElseIfBranchNode: ElseIfBranchStatement)
    {
        sb.append("else{")
        visitIfSelectionStatement(IfSelectionStatement(ifElseIfBranchNode.condition, ifElseIfBranchNode.statements))
        sb.append("}")
    }

    override fun visitElseBranchStatement(elseBranchNode: ElseBranchStatement)
    {
        sb.append("else{")
        elseBranchNode.statements.forEach { it.accept(this) }
        sb.append("}")
    }

    override fun visitWhileIterationStatement(whileIterationStatement: WhileIterationStatement)
    {
        sb.append("while(")
        whileIterationStatement.expr.accept(this)
        sb.append("){")
        whileIterationStatement.statements.forEach { it.accept(this) }
        sb.append("}")
    }

    override fun visitDoWhileIterationStatement(doWhileIterationStatement: DoWhileIterationStatement)
    {
        sb.append("do{")
        doWhileIterationStatement.statements.forEach { it.accept(this) }
        sb.append("}while(")
        doWhileIterationStatement.expr.accept(this)
        sb.append(")")
    }

    override fun visitBinaryExpr(binaryExpr: BinaryExpr)
    {
        sb.append("(")
        binaryExpr.leftExpr.accept(this)
        sb.append(binaryExpr.operator.symbol.joinToString("") { it.toString() })
        binaryExpr.rightExpr.accept(this)
        sb.append(")")
    }

    override fun visitUnaryExpr(unaryExpr: UnaryExpr)
    {
        sb.append("(")
        sb.append(unaryExpr.operator.symbol.rep)
        unaryExpr.operand.accept(this)
        sb.append(")")
    }

    override fun visitAssignmentExpr(assignmentExpr: AssignmentExpr)
    {
        assignmentExpr.target.accept(this)
        sb.append("=")
        assignmentExpr.value.accept(this)
    }

    override fun visitFunctionCallExpr(functionCallExpr: FunctionCallExpr)
    {
        functionCallExpr.name.accept(this)
        sb.append("(")
        functionCallExpr.parameters.forEachIndexed { i, it ->
            it.accept(this)
            if(i > 0 && i < functionCallExpr.parameters.size - 1)
            {
                sb.append(",")
            }
        }
        sb.append(")")
    }

    override fun visitIntrinsicCallExpr(intrinsicCallExpr: IntrinsicCallExpr)
    {
        when(intrinsicCallExpr.name.intrinsicKey)
        {
            Builtin.Intrinsics.TRACE ->
            {
                if(intrinsicCallExpr.parameters.size > 1)
                {
                    Diagnostics.Logging.warn(
                        "KiraNekoTranspiler::visitIntrinsicCallExpr",
                        "The intrinsic '${Builtin.Intrinsics.TRACE.rep}' only accepts one argument. Ignoring the rest..."
                    )
                }
                sb.append(
                    "\$print(\"[${
                        intrinsicCallExpr.name.absoluteFileLocation.srcFile.replace(
                            "\\",
                            "\\\\"
                        )
                    }:${intrinsicCallExpr.name.absoluteFileLocation.lineNumber}:${intrinsicCallExpr.name.absoluteFileLocation.column}]\"+"
                )
                intrinsicCallExpr.parameters.first().accept(this)
                sb.append(")")
            }
        }
    }

    override fun visitCompoundAssignmentExpr(compoundAssignmentExpr: CompoundAssignmentExpr)
    {
        TODO("Not yet implemented")
    }

    override fun visitIntegerLiteral(integerLiteral: IntegerLiteral)
    {
        sb.append(integerLiteral.value)
    }

    override fun visitStringLiteral(stringLiteral: StringLiteral)
    {
        sb.append('"')
        sb.append(stringLiteral.value)
        sb.append('"')
    }

    override fun visitBoolLiteral(boolLiteral: BoolLiteral)
    {
        sb.append(boolLiteral.value)
    }

    override fun visitFloatLiteral(floatLiteral: FloatLiteral)
    {
        sb.append(floatLiteral.value)
    }

    override fun visitIdentifier(identifier: Identifier)
    {
        sb.append(identifier.name)
    }

    override fun visitType(typeNode: Type)
    {
        sb.append(typeNode.name)
    }

    override fun visitVariableDecl(variableDecl: VariableDecl)
    {
        sb.append("var ")
        variableDecl.name.accept(this)
        sb.append("/*[[")
        variableDecl.type.accept(this)
        sb.append("]]*/=")
        variableDecl.value.accept(this)
    }

    override fun transpile()
    {
        sb.clear()
        TokensProvider.rootASTNode.statements.forEach {
            it.accept(this)
        }
        val outputFile =
                File("${GeneratedProvider.outputFile}${if(!GeneratedProvider.outputFile.contains(".")) ".$fileExtension" else ""}")
        if(!outputFile.exists())
        {
            outputFile.createNewFile()
        }
        outputFile.writeText(sb.toString())
        Diagnostics.Logging.info("KiraNekoTranspiler", "Transpiled Neko output to ${outputFile.absolutePath}")
    }
}