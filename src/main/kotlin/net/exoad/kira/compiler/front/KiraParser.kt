package net.exoad.kira.compiler.front

import net.exoad.kira.Builtin
import net.exoad.kira.Keywords
import net.exoad.kira.Symbols
import net.exoad.kira.compiler.Diagnostics
import net.exoad.kira.compiler.Intrinsic
import net.exoad.kira.compiler.SourceContext
import net.exoad.kira.compiler.front.elements.*
import net.exoad.kira.compiler.front.exprs.*
import net.exoad.kira.compiler.front.exprs.decl.ClassDecl
import net.exoad.kira.compiler.front.exprs.decl.Decl
import net.exoad.kira.compiler.front.exprs.decl.EnumDecl
import net.exoad.kira.compiler.front.exprs.decl.FirstClassDecl
import net.exoad.kira.compiler.front.exprs.decl.FunctionDecl
import net.exoad.kira.compiler.front.exprs.decl.ModuleDecl
import net.exoad.kira.compiler.front.exprs.decl.ObjectDecl
import net.exoad.kira.compiler.front.exprs.decl.VariableDecl
import net.exoad.kira.compiler.front.statements.*
import java.util.IdentityHashMap
import kotlin.math.max
import kotlin.properties.Delegates

/**
 * A semi-naive LL(k) parser that strays from rollbacks as much as possible. It takes
 * the tokens generated by the [KiraLexer] and uses those to turn them into an AST.
 *
 * It will then pass this AST onto the [KiraSemanticAnalyzer] to make sure the AST is
 * valid grammar.
 */
class KiraParser(private val context: SourceContext)
{
    private var pointer: Int = 0
    private var underPointer: Token =
            context.tokens.firstOrNull() ?: Token.Symbol(Token.Type.S_EOF, Symbols.NULL, 0, FileLocation(1, 1))

    init
    {
        context.astOrigins = IdentityHashMap()
    }

    fun <T : ASTNode> putOrigin(
        node: T,
        location: FileLocation = underPointer.canonicalLocation,
    ): T // returns the original value to facilitate with easier refactoring
    {
        context.astOrigins[node] = location
        return node
    }

    /**
     * Star method to call on [KiraParser] that will turn the passed in [context] into an AST.
     */
    fun parse()
    {
        val statements = mutableListOf<Statement>()
        while(underPointer.type != Token.Type.S_EOF)
        {
            statements.add(parseStatement(null))
        }
        if(statements.first().expr !is ModuleDecl)
        {
            Diagnostics.panic(
                "KiraParser::parse",
                "The first declaration of ${context.file} must be a module declaration!",
                context = context,
                location = FileLocation(1, 1),
                selectorLength = max(1, context.findCanonicalLine(1).length)
            )
        }
        context.ast = RootASTNode(statements)
    }

    /**
     * Grabs the token at the [k]-th position (absolute).
     *
     * If you need relative positioning, take a look at [peek]
     */
    fun look(k: Int): Token
    {
        val index = pointer + k - 1
        return when
        {
            index < context.tokens.size -> context.tokens[index]
            else                        -> Token.Symbol(Token.Type.S_EOF, Symbols.NULL, 0, FileLocation(1, 1))
        }
    }

    private val eofToken = Token.Symbol(Token.Type.S_EOF, Symbols.NULL, 0, FileLocation(1, 1))
    private val tokens = context.tokens // cached peek token

    /**
     * Grabs the token [k] away from [pointer] (relative).
     *
     * If you need absolute positioning, take a look at [look]
     *
     * - also performs caching on the result for the same relative
     */
    private fun peek(k: Int = 0): Token
    {
        val index = pointer + k
        return if(index < tokens.size) tokens[index] else eofToken
    }

    /**
     * Moves the pointer forward to the next token and thus "consumes" the current token
     */
    private fun advancePointer()
    {
        pointer++
        underPointer = if(pointer < tokens.size) tokens[pointer] else eofToken
    }

    fun tryInOrder(candidates: Array<Array<Token.Type>>, peekOffset: Int = 0): Array<Token.Type>?
    {
        if(candidates.isEmpty())
        {
            return null
        }
        if(candidates.size == 1)
        {
            val candidate = candidates[0]
            for(i in candidate.indices)
            {
                if(candidate[i] != peek(i + peekOffset).type) return null
            }
            return candidate
        }
        for(candidate in candidates)
        {
            var match = true
            for(i in candidate.indices)
            {
                if(candidate[i] != peek(i + peekOffset).type)
                {
                    match = false
                    break
                }
            }
            if(match)
            {
                return candidate
            }
        }
        return null
    }

    private inline fun expectOptionalThenAdvance(token: Token.Type, ifOk: () -> Unit = { advancePointer() })
    {
        if(underPointer.type == token)
        {
            ifOk()
        }
    }

    private fun expectModifiers(modifiers: Map<Modifiers, FileLocation>?, scopes: Modifiers.Context)
    {
        val r = if(modifiers == null || modifiers.isEmpty()) null
        else modifiers.keys.toList().find { !it.context.contains(scopes) }
        if(r != null)
        {
            Diagnostics.panic(
                "KiraParser::expectModifiers",
                buildString {
                    append("The modifier ")
                    append(r.tokenType.diagnosticsName())
                    append(" cannot be applied to a ")
                    append(Modifiers.Context.CLASS)
                },
                location = modifiers?.get(r),
                // this is so sketchy lmao, going through the values of a map to find the key which is THE OPPOSITE THING A MAP IS FOR LMAO
                // but since the program is already crashing here, doesnt really matter
                //
                // it just feels really sketchy and could fail at anytime ig
                selectorLength = Keywords.reserved.filterValues { it == r.tokenType }.keys.first().length,
                context = context
            )
        }
    }

    private inline fun expectThenAdvance(token: Token.Type, ifOk: () -> Unit = { advancePointer() })
    {
        when(underPointer.type != token)
        {
            true ->
                Diagnostics.panic(
                    "KiraParser::expect",
                    buildString {
                        append("Expected ")
                        append(token.diagnosticsName())
                        append(" but got ")
                        append(if(underPointer.type.rawDiagnosticsRepresentation == null) "'${underPointer.content}' (${underPointer.type.diagnosticsName()})" else underPointer.type.diagnosticsName())
                    }, // we actually output the content underneath the pointer which is easier to see and depending on if it is like a symbol/keyword we output that else we output variable token contents accordingly
                    location = underPointer.canonicalLocation,
                    selectorLength = underPointer.content.length,
                    context = context
                )
            else -> ifOk()
        }
    }

    private inline fun expectAnyOfThenAdvance(tokens: Array<Token.Type>, ifOk: () -> Unit = { advancePointer() })
    {
        when
        {
            !tokens.contains(underPointer.type) ->
                Diagnostics.panic(
                    "KiraParser::expect",
                    buildString {
                        append("Expected any of ")
                        append(tokens.map { it.diagnosticsName() })
                        append(" but got ")
                        append(underPointer.type.diagnosticsName())
                    },
                    location = underPointer.canonicalLocation,
                    context = context
                )
            else                                -> ifOk()
        }
    }

    fun parseStatement(modifiers: Map<Modifiers, FileLocation>?): Statement
    {
        fun parseWithModifiers(): Statement
        {
            val modifiers = parseModifiers()
            val expr = when(underPointer.type)
            {
                Token.Type.K_CLASS  -> parseClassDecl(modifiers)
                Token.Type.K_OBJECT -> parseObjectDecl(modifiers)
                Token.Type.K_ENUM   -> parseEnumDecl(modifiers)
                else                -> parsePrimaryExpr(modifiers)
            }
            expectOptionalThenAdvance(Token.Type.S_SEMICOLON)
            return Statement(expr)
        }
        if(modifiers != null && modifiers.isNotEmpty())
        {
            return parseWithModifiers()
        }
        return when(underPointer.type)
        {
            // parse keywords stuffs first if possible (like keyword first statements)
            Token.Type.K_RETURN     -> parseReturnStatement()
            Token.Type.K_IF         -> parseIfSelectionStatement()
            Token.Type.K_WHILE      -> parseWhileIterationStatement()
            Token.Type.K_DO         -> parseDoWhileIterationStatement()
            Token.Type.K_FOR        -> parseForIterationStatement()
            Token.Type.K_USE        -> parseUseStatement()
            Token.Type.K_BREAK      -> parseBreakStatement()
            Token.Type.K_CONTINUE   -> parseContinueStatement()
            in Token.Type.modifiers -> parseWithModifiers()
            Token.Type.K_CLASS      -> // this part covers the case where the class decl has no modifiers on it. THIS CONDITION NEEDS TO BE UNDER THE PREVIOUS CONDITION
            {
                val expr = parseClassDecl(null)
                expectOptionalThenAdvance(Token.Type.S_SEMICOLON)
                return Statement(expr)
            }
            Token.Type.K_ENUM       ->
            {
                val expr = parseEnumDecl(null)
                expectOptionalThenAdvance(Token.Type.S_SEMICOLON)
                return Statement(expr)
            }
            Token.Type.K_OBJECT     -> // similar to the previous class case, covering when it has modifiers
            {
                val expr = parseObjectDecl(null)
                expectOptionalThenAdvance(Token.Type.S_SEMICOLON)
                return Statement(expr)
            }
            else                    ->
            {
                val expr = parseExpr()
                // todo: idk wtf this panic message is for ?
//                if(underPointer.type == Token.Type.L_INTEGER || underPointer.type == Token.Type.IDENTIFIER)
//                {
//                    Diagnostics.panic(
//                        "KiraParser::parseStatement",
//                        "Unexpected token '${underPointer.content}'",
//                        location = underPointer.canonicalLocation,
//                        selectorLength = underPointer.content.length,
//                        context = context
//                    )
//                }
                expectOptionalThenAdvance(Token.Type.S_SEMICOLON)
                Statement(expr)
            }
        }
    }

    /**
     * Used to parse a statement between two `{}` AKA a block.
     */
    private fun parseStatementBlock(): List<Statement>
    {
        expectThenAdvance(Token.Type.S_OPEN_BRACE)
        val statements = mutableListOf<Statement>()
        while(underPointer.type != Token.Type.S_CLOSE_BRACE && underPointer.type != Token.Type.S_EOF)
        {
            statements.add(parseStatement(null))
        }
        expectThenAdvance(Token.Type.S_CLOSE_BRACE)
        return statements
    }

    fun parseReturnStatement(): Statement // y dont they just call it a return expr? lol beats me tho, just another way to represent an astnode
    {
        val origin = underPointer.canonicalLocation
        expectThenAdvance(Token.Type.K_RETURN)
        val expr = parseExpr()
        expectOptionalThenAdvance(Token.Type.S_SEMICOLON)
        return putOrigin(ReturnStatement(expr), origin)
    }

    fun parseBreakStatement(): Statement
    {
        val origin = underPointer.canonicalLocation
        expectThenAdvance(Token.Type.K_BREAK)
        return putOrigin(BreakStatement(), origin)
    }

    fun parseContinueStatement(): Statement
    {
        val origin = underPointer.canonicalLocation
        expectThenAdvance(Token.Type.K_CONTINUE)
        return putOrigin(ContinueStatement(), origin)
    }

    fun parseForIterationStatement(): Statement
    {
        val origin = underPointer.canonicalLocation
        expectThenAdvance(Token.Type.K_FOR)
        expectThenAdvance(Token.Type.S_OPEN_PARENTHESIS)
        // todo: might need a better warning message here, since the initializer needs to be present
        expectThenAdvance(Token.Type.K_MODIFIER_MUTABLE)
        val identifier = parseIdentifier()
        expectThenAdvance(Token.Type.S_COLON)
        val target = parseExpr()
        expectThenAdvance(Token.Type.S_CLOSE_PARENTHESIS)
        val body = parseStatementBlock()
        return putOrigin(ForIterationStatement(ForIterationExpr(identifier, target), body), origin)
    }

    fun parseWhileIterationStatement(): Statement
    {
        val origin = underPointer.canonicalLocation
        expectThenAdvance(Token.Type.K_WHILE)
        expectThenAdvance(Token.Type.S_OPEN_PARENTHESIS)
        val condition = parseExpr()
        expectThenAdvance(Token.Type.S_CLOSE_PARENTHESIS)
        return putOrigin(WhileIterationStatement(condition, parseStatementBlock()), origin)
    }

    fun parseDoWhileIterationStatement(): Statement
    {
        val origin = underPointer.canonicalLocation
        expectThenAdvance(Token.Type.K_DO)
        val statements = parseStatementBlock()
        expectThenAdvance(Token.Type.K_WHILE)
        expectThenAdvance(Token.Type.S_OPEN_PARENTHESIS)
        val condition = parseExpr()
        expectThenAdvance(Token.Type.S_CLOSE_PARENTHESIS)
        expectOptionalThenAdvance(Token.Type.S_SEMICOLON)
        return putOrigin(DoWhileIterationStatement(condition, statements), origin)
    }

    fun parseIfSelectionStatement(): Statement
    {
        val origin = underPointer.canonicalLocation
        expectThenAdvance(Token.Type.K_IF)
        expectThenAdvance(Token.Type.S_OPEN_PARENTHESIS)
        val condition = parseExpr()
        expectThenAdvance(Token.Type.S_CLOSE_PARENTHESIS)
        val thenStatements = parseStatementBlock()
        val branches = mutableListOf<IfElseBranchStatementNode>()
        while(underPointer.type == Token.Type.K_ELSE)
        {
            advancePointer() // consume "else" part: not useful
            when(underPointer.type) // before i started with always making that "else-if" part was just "elif" which made parsing a lot easier, but i can see why it really isnt that necessary LOL
            {
                Token.Type.K_IF -> // "else-if" part
                {
                    val subOrigin = underPointer.canonicalLocation
                    advancePointer()
                    expectThenAdvance(Token.Type.S_OPEN_PARENTHESIS)
                    val deepCondition = parseExpr()
                    expectThenAdvance(Token.Type.S_CLOSE_PARENTHESIS)
                    branches.add(putOrigin(ElseIfBranchStatement(deepCondition, parseStatementBlock()), subOrigin))
                }
                else            -> branches.add(putOrigin(ElseBranchStatement(parseStatementBlock())))
            }
        }
        return putOrigin(IfSelectionStatement(condition, thenStatements, branches), origin)
    }

    // handles special cases with closing angle which are not tokenized together during the lexer (we use angle brackets for generics smh)
    private fun tryBinaryOps(peekOffset: Int = 0): Array<Token.Type>?
    {
        return tryInOrder(
            arrayOf(
                arrayOf(Token.Type.S_CLOSE_ANGLE, Token.Type.S_CLOSE_ANGLE, Token.Type.S_CLOSE_ANGLE),
                arrayOf(Token.Type.S_CLOSE_ANGLE, Token.Type.S_CLOSE_ANGLE),
                arrayOf(Token.Type.S_CLOSE_ANGLE, Token.Type.S_EQUAL)
            ),
            peekOffset
        )
    }

    fun parseExpr(minPrecedence: Int = 0): Expr
    {
        val origin = underPointer.canonicalLocation
        var left: Expr = parsePrimaryOrUnaryExpr()
        while(true)
        {
            val binOpTokens = tryBinaryOps() ?: arrayOf(underPointer.type)
            val binaryOpType = BinaryOp.byTokenTypeMaybe(binOpTokens)
            if(binaryOpType == null || binaryOpType.precedence < minPrecedence)
            {
                break
            }
            repeat(binOpTokens.size)
            {
                advancePointer() // consume the operators
            }
            // the following binary operators require special parsing of the right hand side so they are put before the others
            if(binaryOpType == BinaryOp.TYPE_CHECK)
            {
                val right = parseType()
                return putOrigin(TypeCheckExpr(left, right), origin)
            }
            if(binaryOpType == BinaryOp.TYPE_CAST)
            {
                val right = parseType()
                return putOrigin(TypeCastExpr(left, right), origin)
            }
            val nextMinPrecedence = binaryOpType.precedence + 1
            val right = parseExpr(nextMinPrecedence)
            left = when(binaryOpType)
            {
                BinaryOp.CONJUNCTIVE_DOT -> MemberAccessExpr(left, right)
                BinaryOp.RANGE           -> RangeExpr(left, right)
                else                     -> BinaryExpr(left, right, binaryOpType)
            }
        }
        return putOrigin(left, origin)
    }

    private fun parsePrimaryOrUnaryExpr(): Expr
    {
        return when
        {
            UnaryOp.byTokenTypeMaybe(underPointer.type) != null -> parseUnaryExpr()
            else                                                -> parsePrimaryExpr(null)
        }
    }

    fun parsePrimaryExpr(modifiers: Map<Modifiers, FileLocation>?): Expr
    {
        return when(underPointer.type)
        {
            // lowkey this hard coded switch statement seems like the best approach, but i get that
            // itch that it will be like redundancy and edge case hell
            Token.Type.L_FLOAT                                                          -> parseFloatLiteral()
            Token.Type.L_INTEGER                                                        -> parseIntegerLiteral()
            Token.Type.L_STRING                                                         -> parseStringLiteral()
            Token.Type.L_NULL                                                           -> parseNullLiteral()
            Token.Type.S_OPEN_BRACE                                                     -> parseMapLiteral(false)
            Token.Type.S_OPEN_BRACKET                                                   -> parseArrayLiteral()
            Token.Type.K_MODIFIER_MUTABLE                                               ->
                when(peek(1).type)
                {
                    Token.Type.S_OPEN_BRACKET ->
                    {
                        advancePointer() // consumes the previous modifier (mutable)
                        parseListLiteral()
                    }
                    Token.Type.S_OPEN_BRACE   ->
                    {
                        advancePointer() // consume the mutable modifier
                        parseMapLiteral(true)
                    }
                    else                      -> Diagnostics.panic(
                        "KiraParser::parsePrimaryExpr",
                        "${Token.Type.K_MODIFIER_MUTABLE} is only allowed on arrays at this position",
                        context = context,
                        location = underPointer.canonicalLocation,
                        selectorLength = underPointer.content.length
                    )
                }
            Token.Type.S_AT                                                             ->
                when(peek(1).type)
                {
                    Token.Type.IDENTIFIER ->
                    {
                        advancePointer()
                        parseIntrinsicCallExpr()
                    }
                    else                  -> Diagnostics.panic(
                        "KiraParser::parsePrimaryExpr",
                        "Intrinsics must be followed by an identifier. I found '${peek(1).type.diagnosticsName()}'",
                        location = underPointer.canonicalLocation,
                        selectorLength = peek(1).content.length,
                        context = context
                    )
                }
            Token.Type.K_WITH                                                           -> parseWithExpr()
            Token.Type.K_MODULE                                                         -> parseModuleDecl()
            Token.Type.IDENTIFIER                                                       ->
                when(peek(1).type)
                {
                    Token.Type.S_OPEN_PARENTHESIS -> parseFunctionCallOrDeclExpr(modifiers)
                    else                          -> parseIdentifierExpr(modifiers)
                }
            Token.Type.L_TRUE_BOOL, Token.Type.L_FALSE_BOOL                             -> parseBoolLiteral()
            Token.Type.OP_SUB, Token.Type.OP_ADD, Token.Type.S_BANG, Token.Type.S_TILDE -> parseUnaryExpr()
            Token.Type.S_OPEN_PARENTHESIS                                               ->
            {
                advancePointer()
                val expr = parseExpr()
                expectThenAdvance(Token.Type.S_CLOSE_PARENTHESIS)
                expr
            }
            else                                                                        ->
                Diagnostics.panic(
                    "KiraParser::parsePrimaryExpr",
                    "${
                        when(underPointer.type.rawDiagnosticsRepresentation)
                        {
                            null -> "'${underPointer.content}'"
                            else -> underPointer.type.diagnosticsName()
                        }
                    } is not allowed here.",
                    location = underPointer.canonicalLocation,
                    selectorLength = underPointer.content.length,
                    context = context
                )
        }
    }

    fun parseModuleDecl(): Decl
    {
        val origin = underPointer.canonicalLocation
        expectThenAdvance(Token.Type.K_MODULE)
        val uri = parseStringLiteral()
        return putOrigin(ModuleDecl(uri), origin)
    }

    fun parseUnaryExpr(): Expr
    {
        val origin = underPointer.canonicalLocation
        val operatorToken = underPointer
        expectAnyOfThenAdvance(UnaryOp.entries.map { it.tokenType }.toTypedArray())
        val operand = parseExpr(UnaryOp.NEG.precedence)
        return putOrigin(UnaryExpr(UnaryOp.byTokenTypeMaybe(operatorToken.type) {
            Diagnostics.panic(
                "UnaryOperator::byTokenTypeMaybe",
                "$operatorToken is not an unary operator!",
                context = context,
                location = operatorToken.canonicalLocation,
                selectorLength = operatorToken.content.length
            )
        }!!, operand), origin)
    }

    fun parseBinaryExpr(): Expr
    {
        val origin = underPointer.canonicalLocation
        var left = parsePrimaryExpr(null)
        while(Token.Type.isBinaryOperator(underPointer.type))
        {
            val operator = underPointer
            advancePointer()
            val right = parsePrimaryExpr(null)
            left = when(operator.type)
            {
                Token.Type.S_DOT -> MemberAccessExpr(left, right)
                else             -> BinaryExpr(
                    left,
                    right,
                    BinaryOp.byTokenTypeMaybe(arrayOf(operator.type)) {
                        Diagnostics.panic(
                            "BinaryOperator::byTokenTypeMaybe",
                            "$operator is not a binary operator!",
                            context = context,
                            location = operator.canonicalLocation,
                            selectorLength = operator.content.length
                        )
                    }!!
                )
            }
        }
        return putOrigin(left, origin)
    }

    fun parseWithExpr(): Expr
    {
        val origin = underPointer.canonicalLocation
        expectThenAdvance(Token.Type.K_WITH)
        expectThenAdvance(Token.Type.S_OPEN_BRACE)
        val members = mutableListOf<WithExprMember>()
        while(underPointer.type != Token.Type.S_CLOSE_BRACE && underPointer.type != Token.Type.S_EOF)
        {
            if(members.isNotEmpty())
            {
                expectThenAdvance(Token.Type.S_COMMA)
            }
            val subOrigin = underPointer.canonicalLocation
            val identifier = parseIdentifier()
            expectThenAdvance(Token.Type.S_EQUAL)
            val expr = parseExpr()
            members.add(putOrigin(WithExprMember(identifier, expr), subOrigin))
        }
        expectThenAdvance(Token.Type.S_CLOSE_BRACE)
        return putOrigin(WithExpr(members), origin)
    }

    fun parseIntrinsicCallExpr(): Expr
    {
        // the current implementation of intrinsic calls act more like preprocessor directives in other languages
        // it just finds and replaces in whatever process after it uses it
        //
        // for a better way we could just add it as a find and replace method, but that just feels lame, but whatever.
        val startLoc = underPointer.canonicalLocation
        val identifier = parseIdentifier()
        expectThenAdvance(Token.Type.S_OPEN_PARENTHESIS)
        val parameters = mutableListOf<Expr>()
        while(underPointer.type != Token.Type.S_CLOSE_PARENTHESIS)
        {
            if(parameters.isNotEmpty())
            {
                expectThenAdvance(Token.Type.S_COMMA)
            }
            parameters.add(parseExpr())
        }
        expectThenAdvance(Token.Type.S_CLOSE_PARENTHESIS)
        val findVal = Builtin.Intrinsics.entries.find { it.rep == identifier.name }
        return when(findVal != null)
        {
            true -> putOrigin(
                IntrinsicCallExpr(
                    Intrinsic(
                        findVal,
                        AbsoluteFileLocation(
                            underPointer.canonicalLocation.lineNumber,
                            underPointer.canonicalLocation.column,
                            context.file
                        )
                    ),
                    parameters
                ), startLoc
            )
            else -> Diagnostics.panic(
                "KiraParser::parseIntrinsicCallExpr",
                "I could not find an intrinsic named '${identifier.name}'",
                location = startLoc,
                selectorLength = identifier.name.length,
                context = context
            )
        }
    }

    fun parseFunctionParameters(): List<FunctionParameterExpr>
    {
        // could this be also adapted for future implementations of function notations ??
        val parameters = mutableListOf<FunctionParameterExpr>()
        while(underPointer.type != Token.Type.S_CLOSE_PARENTHESIS && underPointer.type != Token.Type.S_EOF)
        {
            if(parameters.isNotEmpty())
            {
                expectThenAdvance(Token.Type.S_COMMA)
            }
            val modifiers = parseModifiers()
            val origin = underPointer.canonicalLocation
            val name = parseIdentifier()
            expectThenAdvance(Token.Type.S_COLON)
            val type = parseType()
            parameters.add(putOrigin(FunctionParameterExpr(name, type, modifiers.keys.toList()), origin))
        }
        return parameters
    }

    fun parseFunctionCallOrDeclExpr(modifiers: Map<Modifiers, FileLocation>?): Expr
    {
        var identifier: Identifier? = null
        if(underPointer.type == Token.Type.IDENTIFIER)
        {
            identifier = parseIdentifier()
        }
        expectThenAdvance(Token.Type.S_OPEN_PARENTHESIS)
        return when(isFunctionDeclSyntax())
        {
            true -> if(identifier == null) parseFunctionLiteral() else parseFunctionDecl(identifier, modifiers)
            else ->
            {
                if(identifier == null)
                {
                    Diagnostics.panic(
                        "KiraParser::parseFunctionCallOrDeclExpr",
                        "Function calls must have a valid prefixed identifier!",
                        location = underPointer.canonicalLocation,
                        selectorLength = underPointer.content.length, // todo: check this validity
                        context = context
                    )
                }
                parseFunctionCallExpr(identifier)
            }
        }
    }

    private fun isFunctionDeclSyntax(): Boolean
    {
        var i = 0
        while(true)
        {
            val token = peek(i)
            val next = peek(i + 1)
            if(token.type == Token.Type.S_CLOSE_PARENTHESIS && next.type != Token.Type.S_COLON)
            {
                return false
            }
            if(token.type == Token.Type.S_COLON)
            {
                return true
            }
            i++
        }
    }

    private fun parseFunctionDecl(
        identifier: Identifier,
        modifiers: Map<Modifiers, FileLocation>?,
    ): FunctionDecl
    {
        expectModifiers(modifiers, Modifiers.Context.FUNCTION)
        val origin = underPointer.canonicalLocation
        val functionLiteral = parseFunctionLiteral()
        return putOrigin(
            FunctionDecl(
                identifier,
                functionLiteral,
                modifiers?.keys?.toList() ?: emptyList()
            ), origin
        )
    }

    private fun parseFunctionCallParameter(): Pair<List<FunctionCallNamedParameterExpr>, List<FunctionCallPositionalParameterExpr>>
    {
        val named = mutableListOf<FunctionCallNamedParameterExpr>()
        val positional = mutableListOf<FunctionCallPositionalParameterExpr>()
        var positionalIndex = 0
        var seenNamed = false
        while(underPointer.type != Token.Type.S_CLOSE_PARENTHESIS && underPointer.type != Token.Type.S_EOF)
        {
            if(positional.isNotEmpty() || named.isNotEmpty())
            {
                expectThenAdvance(Token.Type.S_COMMA)
            }
            val startToken = underPointer
            if(underPointer.type == Token.Type.IDENTIFIER && peek(1).type == Token.Type.S_EQUAL)
            {
                seenNamed = true
                val origin = underPointer.canonicalLocation
                val identifier = parseIdentifier()
                expectThenAdvance(Token.Type.S_EQUAL)
                val expr = parseExpr()
                if(expr is CompoundAssignmentExpr || expr is AssignmentExpr)
                {
                    Diagnostics.panic(
                        "KiraParser::parseFunctionCallParameter",
                        "Cannot use assignment expressions in function call parameters",
                        context = context,
                        location = startToken.canonicalLocation,
                        selectorLength = startToken.content.length
                    )
                }
                named.add(putOrigin(FunctionCallNamedParameterExpr(identifier, expr), origin))
            }
            else
            {
                if(seenNamed)
                {
                    Diagnostics.panic(
                        "KiraParser::parseFunctionCallParameter",
                        "Positional arguments must come before named arguments",
                        context = context,
                        location = startToken.canonicalLocation,
                        selectorLength = startToken.content.length
                    )
                }
                val origin = underPointer.canonicalLocation
                val expr = parseExpr()
                if(expr is CompoundAssignmentExpr || expr is AssignmentExpr)
                {
                    Diagnostics.panic(
                        "KiraParser::parseFunctionCallParameter",
                        "Cannot use assignment expressions in function call parameters",
                        context = context,
                        location = startToken.canonicalLocation,
                        selectorLength = startToken.content.length
                    )
                }
                positional.add(putOrigin(FunctionCallPositionalParameterExpr(positionalIndex++, expr), origin))
            }
        }
        expectThenAdvance(Token.Type.S_CLOSE_PARENTHESIS)
        return named to positional
    }

    private fun parseFunctionCallExpr(identifier: Identifier): FunctionCallExpr
    {
        val parameters = parseFunctionCallParameter()
        return putOrigin(FunctionCallExpr(identifier, parameters.second, parameters.first))
    }

    private fun parseIdentifierExpr(modifiers: Map<Modifiers, FileLocation>?): Expr
    {
        if(tryCompoundAssignmentOperators(1) != null) // skip the identifier with peekoffset +1 (similar to why we also peek(1) below in the when statement
        {
            return parseCompoundAssignmentExpr()
        }
        return when(peek(1).type)
        {
            Token.Type.S_EQUAL -> parseAssignmentExpr()
            Token.Type.S_COLON -> parseVariableDecl(modifiers)
            else               -> parseIdentifier()
        }
    }

    fun parseUseStatement(): Statement
    {
        val origin = underPointer.canonicalLocation
        expectThenAdvance(Token.Type.K_USE)
        val uri = parseStringLiteral()
        return putOrigin(UseStatement(uri), origin)
    }

    // helper function for dealing with compound assignment operators that utilize the closing angle bracket (which is a pain to disambiguate) <-- this is a fucking word!?!?!
    fun tryCompoundAssignmentOperators(peekOffset: Int = 0): Array<Token.Type>?
    {
        return tryInOrder(
            arrayOf(
                arrayOf(
                    Token.Type.S_CLOSE_ANGLE, Token.Type.S_CLOSE_ANGLE, Token.Type.S_CLOSE_ANGLE, Token.Type.S_EQUAL
                ), arrayOf(
                    Token.Type.S_CLOSE_ANGLE, Token.Type.S_CLOSE_ANGLE, Token.Type.S_EQUAL
                )
            ),
            peekOffset,
        )
    }

    fun parseCompoundAssignmentExpr(): CompoundAssignmentExpr
    {
        val origin = underPointer.canonicalLocation
        val left = parseIdentifier() // todo: allow for more than just identifiers for now
        val opTokens: Array<Token.Type> = tryCompoundAssignmentOperators() ?: arrayOf(underPointer.type)
        println("OPTOKEN = ${opTokens.map { it.name }}")
        val op = CompoundAssignmentExpr.findBinaryOp(opTokens)
        repeat(opTokens.size) { advancePointer() }
        val right = parseExpr()
        return putOrigin(CompoundAssignmentExpr(left, op!!, right), origin)
    }

    fun parseAssignmentExpr(): AssignmentExpr
    {
        val origin = underPointer.canonicalLocation
        val identifier = parseIdentifier()
        expectThenAdvance(Token.Type.S_EQUAL)
        val value = parseBinaryExpr()
        return putOrigin(AssignmentExpr(identifier, value), origin)
    }

    fun parseEnumMemberExpr(): EnumMemberExpr
    {
        val origin = underPointer.canonicalLocation
        val name = parseIdentifier()
        var value: DataLiteral<*>? = null
        if(underPointer.type == Token.Type.S_EQUAL)
        {
            expectThenAdvance(Token.Type.S_EQUAL)
            val start = underPointer
            val parseValue = parsePrimaryExpr(null)
            if(parseValue !is SimpleLiteral && parseValue !is DataLiteral<*>)
            {
                Diagnostics.panic(
                    "KiraParser::parseEnumMemberExpr",
                    "Only simple literals are allowed as enum values. That is strings, booleans, floats, and integers.",
                    location = start.canonicalLocation,
                    selectorLength = start.content.length,
                    context = context
                )
            }
            value = parseValue as DataLiteral<*>
        }
        return putOrigin(EnumMemberExpr(name, value), origin)
    }

    fun parseEnumDecl(modifiers: Map<Modifiers, FileLocation>?): EnumDecl
    {
        expectModifiers(modifiers, Modifiers.Context.ENUM)
        advancePointer() // consume 'enum'
        val origin = underPointer.canonicalLocation
        val name = parseIdentifier() // we only allow simple names, not complex names on enums, cuz there is no point
        expectThenAdvance(Token.Type.S_OPEN_BRACE)
        val members = mutableListOf<EnumMemberExpr>()
        while(underPointer.type != Token.Type.S_CLOSE_BRACE && underPointer.type != Token.Type.S_EOF)
        {
            members.add(parseEnumMemberExpr())
            if(underPointer.type != Token.Type.S_CLOSE_BRACE)
            {
                expectThenAdvance(Token.Type.S_COMMA)
            }
        }
        expectThenAdvance(Token.Type.S_CLOSE_BRACE)
        return putOrigin(EnumDecl(name, members.toTypedArray(), modifiers?.keys?.toList() ?: emptyList()), origin)
    }

    fun parseClassDecl(modifiers: Map<Modifiers, FileLocation>?): ClassDecl
    {
        expectModifiers(modifiers, Modifiers.Context.CLASS)
        advancePointer() //consume the class keyword
        val origin = underPointer.canonicalLocation
        val className = parseType()
        var parentType: TypeSpecifier? = null
        if(underPointer.type == Token.Type.S_COLON) // inheritance here baby ;D
        {
            advancePointer()
            parentType = parseType()
        }
        expectThenAdvance(Token.Type.S_OPEN_BRACE)
        val members = mutableListOf<FirstClassDecl>()
        while(underPointer.type != Token.Type.S_CLOSE_BRACE && underPointer.type != Token.Type.S_EOF)
        {
            val memberModifiers = parseModifiers()
            expectModifiers(memberModifiers, Modifiers.Context.CLASS_MEMBER)
            members.add(
                if(underPointer.type == Token.Type.S_OPEN_PARENTHESIS) // check for simple/anonymous function literals
                {
                    Diagnostics.panic(
                        "KiraParser::parseClassDecl",
                        "Anonymous Function Literals are not allowed by themselves in a class.",
                        location = underPointer.canonicalLocation,
                        selectorLength = underPointer.content.length,
                        context = context
                    )
                }
                else if(peek(1).type == Token.Type.S_COLON)
                {
                    val valDecl = parseVariableDecl(memberModifiers)
                    expectOptionalThenAdvance(Token.Type.S_SEMICOLON)
                    valDecl
                }
                else
                {
                    val start = underPointer.canonicalLocation
                    if(!isFunctionDeclSyntax())
                    {
                        Diagnostics.panic(
                            "KiraParser::parseClassMemberExpr",
                            "Expected a function member here",
                            location = underPointer.canonicalLocation,
                            selectorLength = underPointer.content.length,
                            context = context
                        )
                    }
                    val expr = parseFunctionCallOrDeclExpr(memberModifiers)
                    if(expr is Literal) // at this pt this is most likely an anonymous function or a function literal so this is just for my sanity, in hindsight i don't hink this check will ever fail nor will it cover other "data literals"
                    {
                        Diagnostics.panic(
                            "KiraParser::parseClassDecl",
                            buildString {
                                append(expr::class.simpleName ?: "Literal")
                                append("s are not allowed to be placed in classes by themselves")
                            },
                            location = start,
                            selectorLength = context.findCanonicalLine(start.lineNumber).length, // make the error marker cover the whole line!
                            context = context
                        )
                    }
                    expr as FunctionDecl // if this throws, then it is 99.99% a bug
                }
            )
        }
        expectThenAdvance(Token.Type.S_CLOSE_BRACE)
        return putOrigin(ClassDecl(className, modifiers?.keys?.toList() ?: emptyList(), members, parentType), origin)
    }

    fun parseVariableDecl(modifiers: Map<Modifiers, FileLocation>?): VariableDecl
    {
        expectModifiers(modifiers, Modifiers.Context.VARIABLE)
        val origin = underPointer.canonicalLocation
        val identifier = parseIdentifier()
        expectThenAdvance(Token.Type.S_COLON)
        val type = parseType()
        var value: Expr? = null
        if(underPointer.type == Token.Type.S_EQUAL)
        {
            advancePointer()
            value = parseExpr()
        }
        return putOrigin(VariableDecl(identifier, type, value, modifiers?.keys?.toList() ?: emptyList()), origin)
    }

    fun parseObjectDecl(modifiers: Map<Modifiers, FileLocation>?): ObjectDecl
    {
        expectModifiers(modifiers, Modifiers.Context.OBJECT)
        expectThenAdvance(Token.Type.K_OBJECT)
        val origin = underPointer.canonicalLocation
        val identifier = parseIdentifier()
        expectThenAdvance(Token.Type.S_OPEN_BRACE)
        val members = mutableListOf<Decl>()
        while(underPointer.type != Token.Type.S_CLOSE_BRACE && underPointer.type != Token.Type.S_EOF)
        {
            val start = underPointer.canonicalLocation
            val modifiers = parseModifiers()
            expectModifiers(modifiers, Modifiers.Context.OBJECT_MEMBER)
            val member = parseStatement(modifiers)
            when(member.expr)
            {
                // i just want something like "!is ... && !is ..." why is kotlin so weird, even dart supports this ?
                !is Decl -> Diagnostics.panic(
                    "KiraParser::parseObjectDecl",
                    "The type ${member::class.simpleName} is not allowed in an object declaration. Only declarations are allowed.",
                    context = context,
                    location = start,
                    selectorLength = context.findCanonicalLine(start.lineNumber).length
                )
                else     -> members.add(member.expr as Decl)
            }
        }
        expectThenAdvance(Token.Type.S_CLOSE_BRACE)
        return putOrigin(
            ObjectDecl(identifier, modifiers?.keys?.toList() ?: emptyList(), members),
            origin
        )
    }

    fun parseNullLiteral(): NullLiteral
    {
        expectThenAdvance(Token.Type.L_NULL)
        return putOrigin(NullLiteral)
    }

    fun parseStringLiteral(): StringLiteral
    {
        val value = underPointer.content
        expectThenAdvance(Token.Type.L_STRING)
        return putOrigin(StringLiteral(value))
    }

    fun parseArrayLiteral(): ArrayLiteral
    {
        expectThenAdvance(Token.Type.S_OPEN_BRACKET)
        val elements = mutableListOf<Expr>()
        val origin = underPointer.canonicalLocation
        while(underPointer.type != Token.Type.S_CLOSE_BRACKET && underPointer.type != Token.Type.S_EOF)
        {
            elements.add(parsePrimaryExpr(null))
            if(underPointer.type != Token.Type.S_CLOSE_BRACKET)
            {
                expectThenAdvance(Token.Type.S_COMMA)
            }
        }
        expectThenAdvance(Token.Type.S_CLOSE_BRACKET)
        return putOrigin(ArrayLiteral(elements.toTypedArray()), origin)
    }

    fun parseListLiteral(): ListLiteral
    {
        expectThenAdvance(Token.Type.K_MODIFIER_MUTABLE)
        expectThenAdvance(Token.Type.S_OPEN_BRACKET)
        val elements = mutableListOf<Expr>()
        val origin = underPointer.canonicalLocation
        while(underPointer.type != Token.Type.S_CLOSE_BRACKET && underPointer.type != Token.Type.S_EOF)
        {
            elements.add(parsePrimaryExpr(null))
            if(underPointer.type != Token.Type.S_CLOSE_BRACKET)
            {
                expectThenAdvance(Token.Type.S_COMMA)
            }
        }
        expectThenAdvance(Token.Type.S_CLOSE_BRACKET)
        return putOrigin(ListLiteral(elements), origin)
    }

    fun parseMapLiteral(mutable: Boolean): MapLiteral
    {
        expectThenAdvance(Token.Type.S_OPEN_BRACE)
        val elements = mutableMapOf<Expr, Expr>()
        val origin = underPointer.canonicalLocation
        while(underPointer.type != Token.Type.S_CLOSE_BRACE && underPointer.type != Token.Type.S_EOF)
        {
            val key = parseExpr()
            expectThenAdvance(Token.Type.S_COLON)
            val value = parseExpr()
            elements[key] = value
            if(underPointer.type != Token.Type.S_CLOSE_BRACE)
            {
                expectThenAdvance(Token.Type.S_COMMA)
            }
        }
        expectThenAdvance(Token.Type.S_CLOSE_BRACE)
        return putOrigin(MapLiteral(elements, mutable), origin)
    }

    fun parseIntegerLiteral(): IntegerLiteral
    {
        var value by Delegates.notNull<Long>()
        lateinit var origin: FileLocation
        try
        {
            origin = underPointer.canonicalLocation
            value = underPointer.content.toLong()
        }
        catch(e: Exception)
        {
            Diagnostics.panic(
                "KiraParser::parseIntegerLiteral",
                "Unable to read '${underPointer.content}' as an integer literal",
                cause = e,
                location = underPointer.canonicalLocation,
                selectorLength = underPointer.content.length,
                context = context
            )
        }
        expectThenAdvance(Token.Type.L_INTEGER)
        return putOrigin(IntegerLiteral(value), origin)
    }

    fun parseFloatLiteral(): FloatLiteral
    {
        var value by Delegates.notNull<Double>()
        lateinit var origin: FileLocation
        try
        {
            origin = underPointer.canonicalLocation
            value = underPointer.content.toDouble()
        }
        catch(e: Exception)
        {
            Diagnostics.panic(
                "KiraParser::parseIntegerLiteral",
                "Unable to read '${underPointer.content}' as an integer literal",
                cause = e,
                location = underPointer.canonicalLocation,
                selectorLength = underPointer.content.length,
                context = context
            )
        }
        expectThenAdvance(Token.Type.L_FLOAT)
        return putOrigin(FloatLiteral(value), origin)
    }

    fun parseBoolLiteral(): BoolLiteral
    {
        var value by Delegates.notNull<Boolean>()
        lateinit var origin: FileLocation
        try
        {
            origin = underPointer.canonicalLocation
            value = underPointer.content.toBooleanStrict()
        }
        catch(e: Exception)
        {
            Diagnostics.panic(
                "KiraParser::parseBoolLiteral",
                "Unable to read ${underPointer.content} as a bool literal",
                cause = e,
                location = underPointer.canonicalLocation,
                context = context
            )
        }
        expectAnyOfThenAdvance(arrayOf(Token.Type.L_TRUE_BOOL, Token.Type.L_FALSE_BOOL))
        return putOrigin(BoolLiteral(value), origin)
    }

    fun parseFunctionLiteral(): AnonymousFunction
    {
        val origin = underPointer.canonicalLocation
        val params = parseFunctionParameters()
        expectThenAdvance(Token.Type.S_CLOSE_PARENTHESIS)
        expectThenAdvance(Token.Type.S_COLON)
        val returnType = parseType()
        var body: List<Statement>? = null
        when(underPointer.type)
        {
            Token.Type.S_OPEN_BRACE -> body = parseStatementBlock()
            else                    -> advancePointer()
        }
        return putOrigin(AnonymousFunction(returnType, params, body), origin)
    }

    fun parseIdentifier(): Identifier
    {
        val loc = underPointer.canonicalLocation
        val value = underPointer.content
        expectThenAdvance(Token.Type.IDENTIFIER)
        return putOrigin(Identifier(value), loc)
    }

    fun parseType(trace: Int = 0): TypeSpecifier
    {
        val baseLocation = underPointer.canonicalLocation
        val baseName = underPointer.content
        expectThenAdvance(Token.Type.IDENTIFIER)
        var baseNullable = false
        expectOptionalThenAdvance(Token.Type.S_QUESTION_MARK) {
            baseNullable = true
            advancePointer()
        }
        val generics = mutableListOf<TypeSpecifier>()
        if(underPointer.type == Token.Type.S_OPEN_ANGLE)
        {
            advancePointer()
            while(underPointer.type != Token.Type.S_CLOSE_ANGLE && underPointer.type != Token.Type.S_EOF)
            {
                generics.add(parseType(trace + 1))
                if(underPointer.type == Token.Type.S_COMMA)
                {
                    advancePointer()
                }
                else if(underPointer.type != Token.Type.S_CLOSE_ANGLE)
                {
                    Diagnostics.panic(
                        "KiraParser::parseType",
                        "Expected ',' or '>' in generic parameter list but got ${underPointer.type.diagnosticsName()}",
                        location = underPointer.canonicalLocation,
                        selectorLength = underPointer.content.length,
                        context = context
                    )
                }
            }
            expectThenAdvance(Token.Type.S_CLOSE_ANGLE)
        }
        return putOrigin(TypeSpecifier(baseName, baseNullable, generics.toTypedArray()), baseLocation)
    }

    fun parseModifiers(): Map<Modifiers, FileLocation>
    {
        val modifiers = mutableMapOf<Modifiers, FileLocation>()
        while(underPointer.type in Token.Type.modifiers)
        {
            val currentModifier = Modifiers.byTokenTypeMaybe(underPointer.type) {
                Diagnostics.panic(
                    "KiraParser::parseModifiers",
                    "$underPointer is not a valid modifier",
                    context = context,
                    location = underPointer.canonicalLocation,
                    selectorLength = underPointer.content.length,
                )
            }
            modifiers[currentModifier]?.let {
                Diagnostics.panic(
                    "KiraParser::parseModifiers", "Duplicate modifier at ${underPointer.canonicalLocation}",
                    context = context,
                    location = underPointer.canonicalLocation,
                    selectorLength = underPointer.content.length,
                )
            }
            modifiers[currentModifier!!] = underPointer.canonicalLocation
            advancePointer()
        }
        return modifiers
    }
}