package net.exoad.kira.compiler.front

import net.exoad.kira.Builtin
import net.exoad.kira.Symbols
import net.exoad.kira.compiler.Diagnostics
import net.exoad.kira.compiler.Intrinsic
import net.exoad.kira.compiler.front.KiraParser.look
import net.exoad.kira.compiler.front.KiraParser.peek
import net.exoad.kira.compiler.front.KiraParser.pointer
import net.exoad.kira.compiler.front.elements.*
import net.exoad.kira.compiler.front.exprs.*
import net.exoad.kira.compiler.front.exprs.decl.VariableDecl
import net.exoad.kira.compiler.front.statements.*
import kotlin.properties.Delegates

abstract class ASTNode
{
    abstract fun accept(visitor: ASTVisitor)
}

abstract class ASTVisitor
{
    // STATEMENTS
    abstract fun visitStatement(statementNode: StatementNode)
    abstract fun visitIfSelectionStatement(ifSelectionStatement: IfSelectionStatement)
    abstract fun visitIfElseIfBranchStatement(ifElseIfBranchNode: ElseIfBranchStatement)
    abstract fun visitElseBranchStatement(elseBranchNode: ElseBranchStatement)
    abstract fun visitWhileIterationStatement(whileIterationStatement: WhileIterationStatement)
    abstract fun visitDoWhileIterationStatement(doWhileIterationStatement: DoWhileIterationStatement)

    // Expressions
    abstract fun visitBinaryExpr(binaryExpr: BinaryExpr)
    abstract fun visitUnaryExpr(unaryExpr: UnaryExpr)
    abstract fun visitAssignmentExpr(assignmentExpr: AssignmentExpr)
    abstract fun visitFunctionCallExpr(functionCallExpr: FunctionCallExpr)
    abstract fun visitIntrinsicCallExpr(intrinsicCallExpr: IntrinsicCallExpr)
    abstract fun visitCompoundAssignmentExpr(compoundAssignmentExpr: CompoundAssignmentExpr)

    // LITERALS
    abstract fun visitIntegerLiteral(integerLiteralNode: IntegerLiteral)
    abstract fun visitStringLiteral(stringLiteralNode: StringLiteral)
    abstract fun visitBoolLiteral(boolLiteral: BoolLiteral)
    abstract fun visitFloatLiteral(floatLiteralNode: FloatLiteral)

    // IDENTIFIERS
    abstract fun visitIdentifier(identifierNode: Identifier)
    abstract fun visitType(typeNode: Type)

    // DECLARATIONS
    abstract fun visitVariableDeclaration(variableDeclNode: VariableDecl)
}

class RootASTNode(val statements: List<ASTNode>) : ASTNode()
{
    override fun accept(visitor: ASTVisitor)
    {
        statements.forEach { it.accept(visitor) }
    }
}

/**
 * A semi-naive LL(k) parser that strays from rollbacks as much as possible. It takes
 * the tokens generated by the [KiraLexer] and uses those to turn them into an AST.
 *
 * It will then pass this AST onto the [KiraStaticAnalyzer] to make sure the AST is
 * valid grammar.
 */
object KiraParser
{
    private var pointer: Int = 0
    private var underPointer: Token

    init
    {
        underPointer = if(TokensProvider.tokens.isEmpty()) Token.Symbol(
            Token.Type.S_EOF,
            Symbols.NULL,
            0,
            FileLocation(1, 1)
        )
        else TokensProvider.tokens.first()
    }

    /**
     * Grabs the token at the [k]-th position (absolute).
     *
     * If you need relative positioning, take a look at [peek]
     */
    fun look(k: Int): Token
    {
        val index = pointer + k - 1
        return when
        {
            index < TokensProvider.tokens.size -> TokensProvider.tokens[index]
            else                               -> Token.Symbol(Token.Type.S_EOF, Symbols.NULL, 0, FileLocation(1, 1))
        }
    }

    /**
     * Grabs the token [k] away from [pointer] (relative).
     *
     * If you need absolute positioning, take a look at [look]
     */
    fun peek(k: Int = 0): Token
    {
        val index = pointer + k
        return when
        {
            index < TokensProvider.tokens.size -> TokensProvider.tokens[index]
            else                               -> Token.Symbol(Token.Type.S_EOF, Symbols.NULL, 0, FileLocation(1, 1))
        }
    }

    /**
     * Moves the pointer forward to the next token and thus "consumes" the current token
     */
    fun advance()
    {
        pointer++
        underPointer = when
        {
            pointer < TokensProvider.tokens.size -> TokensProvider.tokens[pointer]
            else                                 -> Token.Symbol(
                Token.Type.S_EOF, Symbols.NULL, 0,
                FileLocation(1, 1)
            )
        }
    }

    fun expect(token: Token.Type, ifOk: () -> Unit = { advance() })
    {
        when(underPointer.type != token)
        {
            true ->
            {
                Diagnostics.panic(
                    "KiraParser::expect",
                    "Expected ${token.diagnosticsName()} but got ${underPointer.type.diagnosticsName()}",
                    location = underPointer.canonicalLocation
                )
            }
            else -> ifOk()
        }
    }

    fun expectAnyOf(
        tokens: Array<Token.Type>,
        ifOk: () -> Unit =
                { advance() },
    )
    {
        when
        {
            !tokens.contains(underPointer.type) ->
            {
                Diagnostics.panic(
                    "KiraParser::expect",
                    "Expected any of ${tokens.map { it.diagnosticsName() }} but got ${underPointer.type.diagnosticsName()}",
                    location = underPointer.canonicalLocation
                )
            }
            else                                -> ifOk()
        }
    }

    fun parseProgram()
    {
        val statements = mutableListOf<ASTNode>()
        while(underPointer.type != Token.Type.S_EOF)
        {
            statements.add(parseStatement())
        }
        TokensProvider.rootASTNode = RootASTNode(statements)
    }

    fun parseStatement(): StatementNode
    {
        return when(underPointer.type)
        {
            // parse keywords stuffs first if possible (like keyword first statements)
            Token.Type.K_IF    -> parseIfSelectionStatement()
            Token.Type.K_WHILE -> parseWhileIterationStatement()
            Token.Type.K_DO    -> parseDoWhileIterationStatement()
            else               ->
            {
                val expr = parseExpr()
                expect(Token.Type.S_SEMICOLON)
                StatementNode(expr)
            }
        }
    }

    /**
     * Used to parse a statement between two `{}` AKA a block.
     */
    private fun parseStatementBlock(): List<StatementNode>
    {
        expect(Token.Type.S_OPEN_BRACE)
        val statements = mutableListOf<StatementNode>()
        while(underPointer.type != Token.Type.S_CLOSE_BRACE && underPointer.type != Token.Type.S_EOF)
        {
            statements.add(parseStatement())
        }
        expect(Token.Type.S_CLOSE_BRACE)
        return statements
    }

    fun parseWhileIterationStatement(): StatementNode
    {
        expect(Token.Type.K_WHILE)
        expect(Token.Type.S_OPEN_PARENTHESIS)
        val condition = parseExpr()
        expect(Token.Type.S_CLOSE_PARENTHESIS)
        return WhileIterationStatement(condition, parseStatementBlock())
    }

    fun parseDoWhileIterationStatement(): StatementNode
    {
        expect(Token.Type.K_DO)
        val statements = parseStatementBlock()
        expect(Token.Type.K_WHILE)
        expect(Token.Type.S_OPEN_PARENTHESIS)
        val condition = parseExpr()
        expect(Token.Type.S_CLOSE_PARENTHESIS)
        expect(Token.Type.S_SEMICOLON)
        return DoWhileIterationStatement(condition, statements)
    }

    fun parseIfSelectionStatement(): StatementNode
    {
        expect(Token.Type.K_IF)
        expect(Token.Type.S_OPEN_PARENTHESIS)
        val condition = parseExpr()
        expect(Token.Type.S_CLOSE_PARENTHESIS)
        val thenStatements = parseStatementBlock()
        val branches = mutableListOf<IfElseBranchStatementNode>()
        while(underPointer.type == Token.Type.K_ELSE)
        {
            advance() // consume "else" part: not useful
            when(underPointer.type)
            {
                Token.Type.K_IF -> // "else-if" part
                {
                    advance()
                    expect(Token.Type.S_OPEN_PARENTHESIS)
                    val deepCondition = parseExpr()
                    expect(Token.Type.S_CLOSE_PARENTHESIS)
                    branches.add(ElseIfBranchStatement(deepCondition, parseStatementBlock()))
                }
                else            -> branches.add(ElseBranchStatement(parseStatementBlock()))
            }
        }
        return IfSelectionStatement(condition, thenStatements, branches)
    }

    fun parseExpr(minPrecedence: Int = 0): Expr
    {
        var left: Expr = parsePrimaryOrUnaryExpr()
        while(true)
        {
            val binaryOpType = BinaryOp.byTokenTypeMaybe(underPointer.type)
            if(binaryOpType == null || binaryOpType.precedence < minPrecedence)
            {
                break
            }
            advance()
            val nextMinPrecedence = binaryOpType.precedence + 1
            val right = parseExpr(nextMinPrecedence)
            left = BinaryExpr(left, right, binaryOpType)
        }
        return left
    }

    private fun parsePrimaryOrUnaryExpr(): Expr
    {
        return when
        {
            UnaryOp.byTokenTypeMaybe(underPointer.type) != null -> parseUnaryExpr()
            else                                                -> parsePrimaryExpr()
        }
    }

    fun parsePrimaryExpr(): Expr
    {
        return when(underPointer.type)
        {
            Token.Type.L_FLOAT                                                          -> parseFloatLiteral()
            Token.Type.L_INTEGER                                                        -> parseIntegerLiteral()
            Token.Type.L_STRING                                                         -> parseStringLiteral()
            Token.Type.S_AT                                                             ->
                when(peek(1).type)
                {
                    Token.Type.IDENTIFIER ->
                    {
                        advance()
                        parseIntrinsicCallExpr()
                    }
                    else                  -> Diagnostics.panic(
                        "KiraParser::parsePrimaryExpr",
                        "Intrinsics must be followed by an identifier",
                        location = underPointer.canonicalLocation,
                        selectorLength = peek(1).content.length
                    )
                }
            Token.Type.IDENTIFIER                                                       ->
                when(peek(1).type)
                {
                    Token.Type.S_OPEN_PARENTHESIS -> parseFunctionCallExpr()
                    else                          -> parseIdentifierExpr()
                }
            Token.Type.L_TRUE_BOOL, Token.Type.L_FALSE_BOOL                             -> parseBoolLiteral()
            Token.Type.OP_SUB, Token.Type.OP_ADD, Token.Type.S_BANG, Token.Type.S_TILDE -> parseUnaryExpr()
            Token.Type.S_OPEN_PARENTHESIS                                               ->
            {
                advance()
                val expr = parseExpr()
                expect(Token.Type.S_CLOSE_PARENTHESIS)
                expr
            }
            else                                                                        -> Diagnostics.panic(
                "KiraParser::parsePrimaryExpr",
                "${
                    when(underPointer.type.rawDiagnosticsRepresentation)
                    {
                        null -> "'${underPointer.content}'"
                        else -> underPointer.type.diagnosticsName()
                    }
                } is not allowed",
                location = underPointer.canonicalLocation,
                selectorLength = underPointer.content.length
            )
        }
    }

    fun parseUnaryExpr(): Expr
    {
        val operatorToken = underPointer
        expectAnyOf(UnaryOp.entries.map { it.tokenType }.toTypedArray())
        val operand = parseExpr(UnaryOp.NEG.precedence)
        return UnaryExpr(UnaryOp.byTokenType(operatorToken.type), operand)
    }

    fun parseBinaryExpr(): Expr
    {
        var left = parsePrimaryExpr()
        while(Token.Type.isBinaryOperator(underPointer.type))
        {
            val operator = underPointer
            advance()
            val right = parsePrimaryExpr()
            left = BinaryExpr(
                left,
                right,
                BinaryOp.Companion.byTokenType(operator.type)
            )
        }
        return left
    }

    fun parseIntrinsicCallExpr(): Expr
    {
        val startLoc = underPointer.canonicalLocation
        val identifier = parseIdentifier()
        expect(Token.Type.S_OPEN_PARENTHESIS)
        val parameters = mutableListOf<Expr>()
        while(underPointer.type != Token.Type.S_CLOSE_PARENTHESIS)
        {
            Diagnostics.Logging.yap("KiraParser::parseIntrinsicCallExpr", parameters)
            if(parameters.isNotEmpty())
            {
                expect(Token.Type.S_COMMA)
            }
            parameters.add(parseExpr())
        }
        expect(Token.Type.S_CLOSE_PARENTHESIS)
        val findVal = Builtin.Intrinsics.entries.find { it.rep == identifier.name }
        return when(findVal != null)
        {
            true -> IntrinsicCallExpr(
                Intrinsic(
                    findVal,
                    AbsoluteFileLocation(
                        underPointer.canonicalLocation.lineNumber,
                        underPointer.canonicalLocation.column,
                        SrcProvider.srcFile
                    )
                ), parameters
            )
            else -> Diagnostics.panic(
                "KiraParser::parseIntrinsicCallExpr",
                "Could not find a compile time intrinsic named '${identifier.name}'",
                location = startLoc,
                selectorLength = identifier.name.length
            )
        }
    }

    fun parseFunctionCallExpr(): Expr
    {
        val identifier = parseIdentifier()
        expect(Token.Type.S_OPEN_PARENTHESIS)
        val parameters = mutableListOf<Expr>()
        while(underPointer.type != Token.Type.S_CLOSE_PARENTHESIS)
        {
            Diagnostics.Logging.yap("KiraParser::parseFunctionCallExpr", parameters)
            if(parameters.isNotEmpty()) // calling with only one parameter like 'myFunction(1,)' would not be right
            {
                expect(Token.Type.S_COMMA)
            }
            parameters.add(parseExpr())
        }
        expect(Token.Type.S_CLOSE_PARENTHESIS)
        return FunctionCallExpr(identifier, parameters)
    }

    private fun parseIdentifierExpr(): Expr
    {
        return when(peek(1).type)
        {
            Token.Type.OP_ASSIGN                   -> parseAssignmentExpr()
            in Token.Type.compoundAssignmentTokens -> parseCompoundAssignmentExpr()
            Token.Type.S_COLON                     -> parseVariableDeclaration()
            else                                   -> parseType()
        }
    }

    fun parseCompoundAssignmentExpr(): CompoundAssignmentExpr
    {
        val left = parseIdentifier() // todo: allow for more than just identifiers for now
        lateinit var op: BinaryOp
        expectAnyOf(Token.Type.compoundAssignmentTokens) {
            op = CompoundAssignmentExpr.findBinaryOp(underPointer.type)
            advance()
        }
        val right = parseExpr()
        return CompoundAssignmentExpr(left, op, right)
    }

    fun parseAssignmentExpr(): AssignmentExpr
    {
        val identifier = parseIdentifier()
        expect(Token.Type.OP_ASSIGN)
        val value = parseBinaryExpr()
        return AssignmentExpr(identifier, value)
    }

    fun parseVariableDeclaration(): VariableDecl
    {
        val identifier = parseIdentifier()
        expect(Token.Type.S_COLON)
        val type = parseType()
        expect(Token.Type.OP_ASSIGN)
        val value = parseBinaryExpr()
        return VariableDecl(identifier, type, value)
    }

    fun parseStringLiteral(): StringLiteral
    {
        val value = underPointer.content
        expect(Token.Type.L_STRING)
        return StringLiteral(value)
    }

    fun parseIntegerLiteral(): IntegerLiteral
    {
        var value by Delegates.notNull<Long>()
        try
        {
            value = underPointer.content.toLong()
        }
        catch(e: Exception)
        {
            Diagnostics.panic(
                "KiraParser::parseIntegerLiteral",
                "Unable to read '${underPointer.content}' as an integer literal",
                cause = e,
                location = underPointer.canonicalLocation
            )
        }
        expect(Token.Type.L_INTEGER)
        return IntegerLiteral(value)
    }

    fun parseFloatLiteral(): FloatLiteral
    {
        var value by Delegates.notNull<Double>()
        try
        {
            value = underPointer.content.toDouble()
        }
        catch(e: Exception)
        {
            Diagnostics.panic(
                "KiraParser::parseIntegerLiteral",
                "Unable to read '${underPointer.content}' as an integer literal",
                cause = e,
                location = underPointer.canonicalLocation
            )
        }
        expect(Token.Type.L_FLOAT)
        return FloatLiteral(value)
    }

    fun parseBoolLiteral(): BoolLiteral
    {
        var value by Delegates.notNull<Boolean>()
        try
        {
            value = underPointer.content.toBooleanStrict()
        }
        catch(e: Exception)
        {
            Diagnostics.panic(
                "KiraParser::parseBoolLiteral",
                "Unable to read ${underPointer.content} as a bool literal",
                cause = e,
                location = underPointer.canonicalLocation
            )
        }
        expectAnyOf(arrayOf(Token.Type.L_TRUE_BOOL, Token.Type.L_FALSE_BOOL))
        return BoolLiteral(value)
    }

    fun parseIdentifier(): Identifier
    {
        val value = underPointer.content
        expect(Token.Type.IDENTIFIER)
        return Identifier(value)
    }

    fun parseType(): Type
    {
        val value = underPointer.content
        expect(Token.Type.IDENTIFIER)
        return Type(value)
    }
}