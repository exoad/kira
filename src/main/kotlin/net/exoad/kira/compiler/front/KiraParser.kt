package net.exoad.kira.compiler.front

import net.exoad.kira.Builtin
import net.exoad.kira.Keywords
import net.exoad.kira.Symbols
import net.exoad.kira.compiler.Diagnostics
import net.exoad.kira.compiler.Intrinsic
import net.exoad.kira.compiler.SourceContext
import net.exoad.kira.compiler.front.elements.*
import net.exoad.kira.compiler.front.exprs.*
import net.exoad.kira.compiler.front.exprs.decl.ClassDecl
import net.exoad.kira.compiler.front.exprs.decl.Decl
import net.exoad.kira.compiler.front.exprs.decl.FirstClassDecl
import net.exoad.kira.compiler.front.exprs.decl.FunctionFirstClassDecl
import net.exoad.kira.compiler.front.exprs.decl.ModuleDecl
import net.exoad.kira.compiler.front.exprs.decl.VariableFirstClassDecl
import net.exoad.kira.compiler.front.statements.*
import kotlin.properties.Delegates

abstract class ASTNode
{
    abstract fun accept(visitor: ASTVisitor)
}

abstract class ASTVisitor
{
    // STATEMENTS
    abstract fun visitStatement(statement: Statement)
    abstract fun visitIfSelectionStatement(ifSelectionStatement: IfSelectionStatement)
    abstract fun visitIfElseIfBranchStatement(ifElseIfBranchNode: ElseIfBranchStatement)
    abstract fun visitElseBranchStatement(elseBranchNode: ElseBranchStatement)
    abstract fun visitWhileIterationStatement(whileIterationStatement: WhileIterationStatement)
    abstract fun visitDoWhileIterationStatement(doWhileIterationStatement: DoWhileIterationStatement)
    abstract fun visitReturnStatement(returnStatement: ReturnStatement)
    abstract fun visitForIterationStatement(forIterationStatement: ForIterationStatement)
    abstract fun visitUseStatement(useStatement: UseStatement)

    // Expressions
    abstract fun visitBinaryExpr(binaryExpr: BinaryExpr)
    abstract fun visitUnaryExpr(unaryExpr: UnaryExpr)
    abstract fun visitAssignmentExpr(assignmentExpr: AssignmentExpr)
    abstract fun visitFunctionCallExpr(functionCallExpr: FunctionCallExpr)
    abstract fun visitIntrinsicCallExpr(intrinsicCallExpr: IntrinsicCallExpr)
    abstract fun visitCompoundAssignmentExpr(compoundAssignmentExpr: CompoundAssignmentExpr)
    abstract fun visitFunctionParameterExpr(functionParameterExpr: FunctionParameterExpr)
    abstract fun visitMemberAccessExpr(memberAccessExpr: MemberAccessExpr)
    abstract fun visitForIterationExpr(forIterationExpr: ForIterationExpr)
    abstract fun visitRangeExpr(rangeExpr: RangeExpr)

    // LITERALS
    abstract fun visitIntegerLiteral(integerLiteral: IntegerLiteral)
    abstract fun visitStringLiteral(stringLiteral: StringLiteral)
    abstract fun visitBoolLiteral(boolLiteral: BoolLiteral)
    abstract fun visitFloatLiteral(floatLiteral: FloatLiteral)
    abstract fun visitFunctionLiteral(functionLiteral: AnonymousFunction)

    // IDENTIFIERS
    abstract fun visitIdentifier(identifier: Identifier)
    abstract fun visitTypeSpecifier(typeSpecifier: TypeSpecifier)

    // DECLARATIONS
    abstract fun visitVariableDecl(variableDecl: VariableFirstClassDecl)
    abstract fun visitFunctionDecl(functionDecl: FunctionFirstClassDecl)
    abstract fun visitClassDecl(classDecl: ClassDecl)
    abstract fun visitModuleDecl(moduleDecl: ModuleDecl)
}

class RootASTNode(val statements: List<ASTNode>) : ASTNode()
{
    override fun accept(visitor: ASTVisitor)
    {
        statements.forEach { it.accept(visitor) }
    }
}
/**
 * A semi-naive LL(k) parser that strays from rollbacks as much as possible. It takes
 * the tokens generated by the [KiraLexer] and uses those to turn them into an AST.
 *
 * It will then pass this AST onto the [KiraSemanticAnalyzer] to make sure the AST is
 * valid grammar.
 */
class KiraParser(private val tokens: List<Token>, private val context: SourceContext)
{
    private var pointer: Int = 0
    private var underPointer: Token =
        tokens.firstOrNull() ?: Token.Symbol(Token.Type.S_EOF, Symbols.NULL, 0, FileLocation(1, 1))

//    init
//    {
//        underPointer = if(tokens.isEmpty()) Token.Symbol(
//            Token.Type.S_EOF,
//            Symbols.NULL,
//            0,
//            FileLocation(1, 1)
//        )
//        else tokens.first()
//    }

    /**
     * Star method to call on [KiraParser] that will turn the passed in [tokens] into an AST.
     */
    fun parse(): RootASTNode
    {
        val statements = mutableListOf<ASTNode>()
        while(underPointer.type != Token.Type.S_EOF)
        {
            statements.add(parseStatement())
        }
        return RootASTNode(statements)
    }

    /**
     * Grabs the token at the [k]-th position (absolute).
     *
     * If you need relative positioning, take a look at [peek]
     */
    fun look(k: Int): Token
    {
        val index = pointer + k - 1
        return when
        {
            index < tokens.size -> tokens[index]
            else                -> Token.Symbol(Token.Type.S_EOF, Symbols.NULL, 0, FileLocation(1, 1))
        }
    }
    /**
     * Grabs the token [k] away from [pointer] (relative).
     *
     * If you need absolute positioning, take a look at [look]
     */
    fun peek(k: Int = 0): Token
    {
        val index = pointer + k
        return when
        {
            index < tokens.size -> tokens[index]
            else                -> Token.Symbol(Token.Type.S_EOF, Symbols.NULL, 0, FileLocation(1, 1))
        }
    }
    /**
     * Moves the pointer forward to the next token and thus "consumes" the current token
     */
    fun advancePointer()
    {
        pointer++
        underPointer = when
        {
            pointer < tokens.size -> tokens[pointer]
            else                  -> Token.Symbol(
                Token.Type.S_EOF, Symbols.NULL, 0,
                FileLocation(1, 1)
            )
        }
    }

    fun expectOptionalThenAdvance(token: Token.Type, ifOk: () -> Unit = { advancePointer() })
    {
        if(underPointer.type == token)
        {
            ifOk()
        }
    }

    private fun expectModifiers(
        modifiers: Map<Modifiers, FileLocation>? = null,
        scopes: Modifiers.Scope
    )
    {
        val r = if(modifiers == null || modifiers.isEmpty()) null
        else modifiers.keys.toList().find { !it.scope.contains(scopes) }
        if(r != null)
        {
            Diagnostics.panic(
                "KiraParser::parseClassDecl",
                "The modifier ${r.tokenType.diagnosticsName()} cannot be applied to a ${Modifiers.Scope.CLASS}",
                location = modifiers?.get(r),
                // this is so sketchy lmao, going through the values of a map to find the key which is THE OPPOSITE THING A MAP IS FOR LMAO
                // but since the program is already crashing here, doesnt really matter
                //
                // it just feels really sketchy and could fail at anytime ig
                selectorLength = Keywords.reserved.filterValues { it == r.tokenType }.keys.first().length,
                context = context
            )
        }
    }

    fun expectThenAdvance(token: Token.Type, ifOk: () -> Unit = { advancePointer() })
    {
        when(underPointer.type != token)
        {
            true ->
                Diagnostics.panic(
                    "KiraParser::expect",
                    "Expected ${token.diagnosticsName()} but got ${underPointer.type.diagnosticsName()}",
                    location = underPointer.canonicalLocation,
                    selectorLength = underPointer.content.length,
                    context = context
                )
            else -> ifOk()
        }
    }

    fun expectAnyOfThenAdvance(
        tokens: Array<Token.Type>,
        ifOk: () -> Unit =
            { advancePointer() },
    )
    {
        when
        {
            !tokens.contains(underPointer.type) ->
                Diagnostics.panic(
                    "KiraParser::expect",
                    "Expected any of ${tokens.map { it.diagnosticsName() }} but got ${underPointer.type.diagnosticsName()}",
                    location = underPointer.canonicalLocation,
                    context = context
                )

            else                                -> ifOk()
        }
    }

//    fun parseProgram()
//    {
//        val statements = mutableListOf<ASTNode>()
//        while(underPointer.type != Token.Type.S_EOF)
//        {
//            statements.add(parseStatement())
//        }
//        TokensProvider.rootASTNode = RootASTNode(statements)
//    }

    fun parseStatement(): Statement
    {
        return when(underPointer.type)
        {
            // parse keywords stuffs first if possible (like keyword first statements)
            Token.Type.K_RETURN     -> parseReturnStatement()
            Token.Type.K_IF         -> parseIfSelectionStatement()
            Token.Type.K_WHILE      -> parseWhileIterationStatement()
            Token.Type.K_DO         -> parseDoWhileIterationStatement()
            Token.Type.K_FOR        -> parseForIterationStatement()
            Token.Type.K_USE        -> parseUseStatement()
            in Token.Type.modifiers ->
            {
                val modifiers = parseModifiers()
                val expr = when(underPointer.type)
                {
                    Token.Type.K_CLASS -> parseClassDecl(modifiers)
                    else               -> parsePrimaryExpr(modifiers)
                }
                expectOptionalThenAdvance(Token.Type.S_SEMICOLON)
                return Statement(expr)
            }
            Token.Type.K_CLASS      -> // this part covers the case where the class decl has no modifiers on it. THIS CONDITION NEEDS TO BE UNDER THE PREVIOUS CONDITION
            {
                val expr = parseClassDecl()
                expectOptionalThenAdvance(Token.Type.S_SEMICOLON)
                return Statement(expr)
            }
            else                    ->
            {
                val expr = parseExpr()
                if(underPointer.type == Token.Type.L_INTEGER || underPointer.type == Token.Type.IDENTIFIER)
                {
                    Diagnostics.panic(
                        "KiraParser::parseStatement",
                        "Unexpected token '${underPointer.content}' after expression",
                        location = underPointer.canonicalLocation,
                        selectorLength = underPointer.content.length,
                        context = context
                    )
                }
                expectOptionalThenAdvance(Token.Type.S_SEMICOLON)
                Statement(expr)
            }
        }
    }

    /**
     * Used to parse a statement between two `{}` AKA a block.
     */
    private fun parseStatementBlock(): List<Statement>
    {
        expectThenAdvance(Token.Type.S_OPEN_BRACE)
        val statements = mutableListOf<Statement>()
        while(underPointer.type != Token.Type.S_CLOSE_BRACE && underPointer.type != Token.Type.S_EOF)
        {
            statements.add(parseStatement())
        }
        expectThenAdvance(Token.Type.S_CLOSE_BRACE)
        return statements
    }

    fun parseReturnStatement(): Statement // y dont they just call it a return expr? lol beats me tho, just another way to represent an astnode
    {
        expectThenAdvance(Token.Type.K_RETURN)
        val expr = parseExpr()
        expectOptionalThenAdvance(Token.Type.S_SEMICOLON)
        return ReturnStatement(expr)
    }

    fun parseForIterationStatement(): Statement
    {
        expectThenAdvance(Token.Type.K_FOR)
        expectThenAdvance(Token.Type.S_OPEN_PARENTHESIS)
        // todo: might need a better warning message here, since the initializer needs to be present
        expectThenAdvance(Token.Type.K_MODIFIER_MUTABLE)
        val identifier = parseIdentifier()
        expectThenAdvance(Token.Type.S_COLON)
        val target = parseExpr()
        expectThenAdvance(Token.Type.S_CLOSE_PARENTHESIS)
        val body = parseStatementBlock()
        return ForIterationStatement(ForIterationExpr(identifier, target), body)
    }

    fun parseWhileIterationStatement(): Statement
    {
        expectThenAdvance(Token.Type.K_WHILE)
        expectThenAdvance(Token.Type.S_OPEN_PARENTHESIS)
        val condition = parseExpr()
        expectThenAdvance(Token.Type.S_CLOSE_PARENTHESIS)
        return WhileIterationStatement(condition, parseStatementBlock())
    }

    fun parseDoWhileIterationStatement(): Statement
    {
        expectThenAdvance(Token.Type.K_DO)
        val statements = parseStatementBlock()
        expectThenAdvance(Token.Type.K_WHILE)
        expectThenAdvance(Token.Type.S_OPEN_PARENTHESIS)
        val condition = parseExpr()
        expectThenAdvance(Token.Type.S_CLOSE_PARENTHESIS)
        expectOptionalThenAdvance(Token.Type.S_SEMICOLON)
        return DoWhileIterationStatement(condition, statements)
    }

    fun parseIfSelectionStatement(): Statement
    {
        expectThenAdvance(Token.Type.K_IF)
        expectThenAdvance(Token.Type.S_OPEN_PARENTHESIS)
        val condition = parseExpr()
        expectThenAdvance(Token.Type.S_CLOSE_PARENTHESIS)
        val thenStatements = parseStatementBlock()
        val branches = mutableListOf<IfElseBranchStatementNode>()
        while(underPointer.type == Token.Type.K_ELSE)
        {
            advancePointer() // consume "else" part: not useful
            when(underPointer.type) // before i started with always making that "else-if" part was just "elif" which made parsing a lot easier, but i can see why it really isnt that necessary LOL
            {
                Token.Type.K_IF -> // "else-if" part
                {
                    advancePointer()
                    expectThenAdvance(Token.Type.S_OPEN_PARENTHESIS)
                    val deepCondition = parseExpr()
                    expectThenAdvance(Token.Type.S_CLOSE_PARENTHESIS)
                    branches.add(ElseIfBranchStatement(deepCondition, parseStatementBlock()))
                }

                else            -> branches.add(ElseBranchStatement(parseStatementBlock()))
            }
        }
        return IfSelectionStatement(condition, thenStatements, branches)
    }

    fun parseExpr(minPrecedence: Int = 0): Expr
    {
        var left: Expr = parsePrimaryOrUnaryExpr()
        while(true)
        {
            val binaryOpType = BinaryOp.byTokenTypeMaybe(underPointer.type)
            if(binaryOpType == null || binaryOpType.precedence < minPrecedence)
            {
                break
            }
            advancePointer()
            val nextMinPrecedence = binaryOpType.precedence + 1
            val right = parseExpr(nextMinPrecedence)
            left =
                when(binaryOpType)
                {
                    BinaryOp.CONJUNCTIVE_DOT -> MemberAccessExpr(left, right)
                    BinaryOp.RANGE           -> RangeExpr(left, right)
                    else                     -> BinaryExpr(left, right, binaryOpType)
                }
        }
        return left
    }

    private fun parsePrimaryOrUnaryExpr(): Expr
    {
        return when
        {
            UnaryOp.byTokenTypeMaybe(underPointer.type) != null -> parseUnaryExpr()
            else                                                -> parsePrimaryExpr()
        }
    }

    fun parsePrimaryExpr(modifiers: Map<Modifiers, FileLocation>? = null): Expr
    {
        return when(underPointer.type)
        {
            // lowkey this hard coded switch statement seems like the best approach, but i get that
            // itch that it will be like redundancy and edge case hell
            Token.Type.L_FLOAT                                                          -> parseFloatLiteral()
            Token.Type.L_INTEGER                                                        -> parseIntegerLiteral()
            Token.Type.L_STRING                                                         -> parseStringLiteral()
            Token.Type.S_AT                                                             ->
                when(peek(1).type)
                {
                    Token.Type.IDENTIFIER ->
                    {
                        advancePointer()
                        parseIntrinsicCallExpr()
                    }

                    else                  -> Diagnostics.panic(
                        "KiraParser::parsePrimaryExpr",
                        "Intrinsics must be followed by an identifier, but found '${peek(1).type.diagnosticsName()}'",
                        location = underPointer.canonicalLocation,
                        selectorLength = peek(1).content.length,
                        context = context
                    )
                }
            Token.Type.K_MODULE                                                         -> parseModuleDecl()
            Token.Type.IDENTIFIER                                                       ->
                when(peek(1).type)
                {
                    Token.Type.S_OPEN_PARENTHESIS -> parseFunctionCallOrDeclExpr(modifiers)
                    else                          -> parseIdentifierExpr(modifiers)
                }
            Token.Type.L_TRUE_BOOL, Token.Type.L_FALSE_BOOL                             -> parseBoolLiteral()
            Token.Type.OP_SUB, Token.Type.OP_ADD, Token.Type.S_BANG, Token.Type.S_TILDE -> parseUnaryExpr()
            Token.Type.S_OPEN_PARENTHESIS                                               ->
            {
                advancePointer()
                val expr = parseExpr()
                expectThenAdvance(Token.Type.S_CLOSE_PARENTHESIS)
                expr
            }
            else                                                                        ->
                Diagnostics.panic(
                    "KiraParser::parsePrimaryExpr",
                    "${
                        when(underPointer.type.rawDiagnosticsRepresentation)
                        {
                            null -> "'${underPointer.content}'"
                            else -> underPointer.type.diagnosticsName()
                        }
                    } is not allowed",
                    location = underPointer.canonicalLocation,
                    selectorLength = underPointer.content.length,
                    context = context
                )
        }
    }

    fun parseModuleDecl(): Decl
    {
        expectThenAdvance(Token.Type.K_MODULE)
        val uri = parseStringLiteral()
        return ModuleDecl(uri)
    }

    fun parseUnaryExpr(): Expr
    {
        val operatorToken = underPointer
        expectAnyOfThenAdvance(UnaryOp.entries.map { it.tokenType }.toTypedArray())
        val operand = parseExpr(UnaryOp.NEG.precedence)
        return UnaryExpr(UnaryOp.byTokenTypeMaybe(operatorToken.type) {
            Diagnostics.panic(
                "UnaryOperator::byTokenTypeMaybe",
                "$operatorToken is not an unary operator!",
                context = context,
                location = operatorToken.canonicalLocation,
                selectorLength = operatorToken.content.length
            )
        }!!, operand)
    }

    fun parseBinaryExpr(): Expr
    {
        var left = parsePrimaryExpr()
        while(Token.Type.isBinaryOperator(underPointer.type))
        {
            val operator = underPointer
            advancePointer()
            val right = parsePrimaryExpr()
            left = when(operator.type)
            {
                Token.Type.S_DOT -> MemberAccessExpr(left, right)
                else             -> BinaryExpr(
                    left,
                    right,
                    BinaryOp.byTokenTypeMaybe(operator.type) {
                        Diagnostics.panic(
                            "BinaryOperator::byTokenTypeMaybe",
                            "$operator is not a binary operator!",
                            context = context,
                            location = operator.canonicalLocation,
                            selectorLength = operator.content.length
                        )
                    }!!
                )
            }
        }
        return left
    }

    fun parseIntrinsicCallExpr(): Expr
    {
        // the current implementation of intrinsic calls act more like preprocessor directives in other languages
        // it just finds and replaces in whatever process after it uses it
        //
        // for a better way we could just add it as a find and replace method, but that just feels lame, but whatever.
        val startLoc = underPointer.canonicalLocation
        val identifier = parseIdentifier()
        expectThenAdvance(Token.Type.S_OPEN_PARENTHESIS)
        val parameters = mutableListOf<Expr>()
        while(underPointer.type != Token.Type.S_CLOSE_PARENTHESIS)
        {
            if(parameters.isNotEmpty())
            {
                expectThenAdvance(Token.Type.S_COMMA)
            }
            parameters.add(parseExpr())
        }
        expectThenAdvance(Token.Type.S_CLOSE_PARENTHESIS)
        val findVal = Builtin.Intrinsics.entries.find { it.rep == identifier.name }
        return when(findVal != null)
        {
            true -> IntrinsicCallExpr(
                Intrinsic(
                    findVal,
                    AbsoluteFileLocation(
                        underPointer.canonicalLocation.lineNumber,
                        underPointer.canonicalLocation.column,
                        context.file
                    )
                ), parameters
            )
            else -> Diagnostics.panic(
                "KiraParser::parseIntrinsicCallExpr",
                "Could not find a compile time intrinsic named '${identifier.name}'",
                location = startLoc,
                selectorLength = identifier.name.length,
                context = context
            )
        }
    }

    fun parseFunctionParameters(): List<FunctionParameterExpr>
    {
        // could this be also adapted for future implementations of function notations ??
        val parameters = mutableListOf<FunctionParameterExpr>()
        while(underPointer.type != Token.Type.S_CLOSE_PARENTHESIS && underPointer.type != Token.Type.S_EOF)
        {
            if(parameters.isNotEmpty())
            {
                expectThenAdvance(Token.Type.S_COMMA)
            }
            val modifiers = parseModifiers()
            val name = parseIdentifier()
            expectThenAdvance(Token.Type.S_COLON)
            val type = parseType()
            parameters.add(FunctionParameterExpr(name, type, modifiers.keys.toList()))
        }
        return parameters
    }

    fun parseFunctionCallOrDeclExpr(modifiers: Map<Modifiers, FileLocation>? = null): Expr
    {
        var identifier: Identifier? = null
        if(underPointer.type == Token.Type.IDENTIFIER)
        {
            identifier = parseIdentifier()
        }
        expectThenAdvance(Token.Type.S_OPEN_PARENTHESIS)
        return when(isFunctionDeclSyntax())
        {
            true -> if(identifier == null) parseFunctionLiteral() else parseFunctionDecl(identifier, modifiers)
            else ->
            {
                if(identifier == null)
                {
                    Diagnostics.panic(
                        "KiraParser::parseFunctionCallOrDeclExpr",
                        "Function calls must have a valid prefixed identifier!",
                        location = underPointer.canonicalLocation,
                        selectorLength = underPointer.content.length, // todo: check this validity
                        context = context
                    )
                }
                parseFunctionCallExpr(identifier)
            }
        }
    }

    private fun isFunctionDeclSyntax(): Boolean
    {
        var i = 0
        while(true)
        {
            val token = peek(i)
            val next = peek(i + 1)
            if(token.type == Token.Type.S_CLOSE_PARENTHESIS && next.type != Token.Type.S_COLON)
            {
                return false
            }
            if(token.type == Token.Type.S_COLON)
            {
                return true
            }
            i++
        }
    }

    private fun parseFunctionDecl(
        identifier: Identifier,
        modifiers: Map<Modifiers, FileLocation>? = null
    ): FunctionFirstClassDecl
    {
        expectModifiers(modifiers, Modifiers.Scope.FUNCTION)
        val functionLiteral = parseFunctionLiteral()
        return FunctionFirstClassDecl(identifier, functionLiteral, modifiers?.keys?.toList() ?: emptyList())
    }

    private fun parseFunctionCallExpr(identifier: Identifier): FunctionCallExpr
    {
        val parsedParameters = mutableListOf<Expr>()
        while(underPointer.type != Token.Type.S_CLOSE_PARENTHESIS && underPointer.type != Token.Type.S_EOF)
        {
            if(parsedParameters.isNotEmpty())
            {
                expectThenAdvance(Token.Type.S_COMMA)
            }
            parsedParameters.add(parseExpr())
        }
        expectThenAdvance(Token.Type.S_CLOSE_PARENTHESIS)
        return FunctionCallExpr(identifier, parsedParameters)
    }

    private fun parseIdentifierExpr(modifiers: Map<Modifiers, FileLocation>? = null): Expr
    {
        return when(peek(1).type)
        {
            Token.Type.OP_ASSIGN                      -> parseAssignmentExpr()
            in Token.Type.compoundAssignmentOperators -> parseCompoundAssignmentExpr()
            Token.Type.S_COLON                        -> parseVariableDecl(modifiers)
            else                                      -> parseIdentifier()
        }
    }

    fun parseUseStatement(): Statement
    {
        expectThenAdvance(Token.Type.K_USE)
        val uri = parseStringLiteral()
        return UseStatement(uri)
    }

    fun parseCompoundAssignmentExpr(): CompoundAssignmentExpr
    {
        val left = parseIdentifier() // todo: allow for more than just identifiers for now
        lateinit var op: BinaryOp
        expectAnyOfThenAdvance(Token.Type.compoundAssignmentOperators) {
            op = CompoundAssignmentExpr.findBinaryOp(underPointer.type)
            advancePointer()
        }
        val right = parseExpr()
        return CompoundAssignmentExpr(left, op, right)
    }

    fun parseAssignmentExpr(): AssignmentExpr
    {
        val identifier = parseIdentifier()
        expectThenAdvance(Token.Type.OP_ASSIGN)
        val value = parseBinaryExpr()
        return AssignmentExpr(identifier, value)
    }

    fun parseClassDecl(modifiers: Map<Modifiers, FileLocation>? = null): ClassDecl
    {
        expectModifiers(modifiers, Modifiers.Scope.CLASS)
        advancePointer() //consume the class keyword
        val className = parseType()
        var parentType: TypeSpecifier? = null
        if(underPointer.type == Token.Type.S_COLON) // inheritance here baby ;D
        {
            advancePointer()
            parentType = parseType()
        }
        expectThenAdvance(Token.Type.S_OPEN_BRACE)
        val members = mutableListOf<FirstClassDecl>()
        while(underPointer.type != Token.Type.S_CLOSE_BRACE && underPointer.type != Token.Type.S_EOF)
        {
            val memberModifiers = parseModifiers()
            expectModifiers(memberModifiers, Modifiers.Scope.CLASS_MEMBER)
            members.add(
                when(underPointer.type != Token.Type.S_OPEN_PARENTHESIS && peek(1).type != Token.Type.S_OPEN_PARENTHESIS) // the first condition covers the case where there can be anonymous functions here
                {
                    true ->
                    {
                        if(underPointer.type != Token.Type.IDENTIFIER)
                        {
                            Diagnostics.panic(
                                "KiraParser::parseClassDecl",
                                "Anonymous Literals are not allowed by themselves in a class.",
                                location = underPointer.canonicalLocation,
                                selectorLength = underPointer.content.length,
                                context = context
                            )
                        }
                        parseVariableDecl(memberModifiers)
                    }
                    else ->
                    {
                        val start = underPointer.canonicalLocation
                        if(!isFunctionDeclSyntax())
                        {
                            Diagnostics.panic(
                                "KiraParser::parseClassMemberExpr",
                                "Expected a function member here",
                                location = underPointer.canonicalLocation,
                                selectorLength = underPointer.content.length,
                                context = context
                            )
                        }
                        val expr = parseFunctionCallOrDeclExpr(memberModifiers)
                        if(expr is Literal) // at this pt this is most likely an anonymous function or a function literal so this is just for my sanity, in hindsight i don't hink this check will ever fail nor will it cover other "data literals"
                        {
                            Diagnostics.panic(
                                "KiraParser::parseClassDecl",
                                "${expr::class.simpleName ?: "Literal"}s are not allowed to be placed in classes by themselves",
                                location = start,
                                selectorLength = context.findCanonicalLine(start.lineNumber).length, // make the error marker cover the whole line!
                                context = context
                            )
                        }
                        parseFunctionCallOrDeclExpr(memberModifiers) as FunctionFirstClassDecl // if this throws, then it is 99.99% a bug
                    }
                }
            )
        }
        expectOptionalThenAdvance(Token.Type.S_CLOSE_BRACE)
        return ClassDecl(className, modifiers?.keys?.toList() ?: emptyList(), members, parentType)
    }

    fun parseVariableDecl(modifiers: Map<Modifiers, FileLocation>? = null): VariableFirstClassDecl
    {
        expectModifiers(modifiers, Modifiers.Scope.VARIABLE)
        val identifier = parseIdentifier()
        expectThenAdvance(Token.Type.S_COLON)
        val type = parseType()
        var value: Expr? = null
        if(underPointer.type == Token.Type.OP_ASSIGN)
        {
            advancePointer()
            value = parseBinaryExpr()
        }
        return VariableFirstClassDecl(identifier, type, value, modifiers?.keys?.toList() ?: emptyList())
    }

    fun parseStringLiteral(): StringLiteral
    {
        val value = underPointer.content
        expectThenAdvance(Token.Type.L_STRING)
        return StringLiteral(value)
    }

    fun parseIntegerLiteral(): IntegerLiteral
    {
        var value by Delegates.notNull<Long>()
        try
        {
            value = underPointer.content.toLong()
        }
        catch(e: Exception)
        {
            Diagnostics.panic(
                "KiraParser::parseIntegerLiteral",
                "Unable to read '${underPointer.content}' as an integer literal",
                cause = e,
                location = underPointer.canonicalLocation,
                selectorLength = underPointer.content.length,
                context = context
            )
        }
        expectThenAdvance(Token.Type.L_INTEGER)
        return IntegerLiteral(value)
    }

    fun parseFloatLiteral(): FloatLiteral
    {
        var value by Delegates.notNull<Double>()
        try
        {
            value = underPointer.content.toDouble()
        }
        catch(e: Exception)
        {
            Diagnostics.panic(
                "KiraParser::parseIntegerLiteral",
                "Unable to read '${underPointer.content}' as an integer literal",
                cause = e,
                location = underPointer.canonicalLocation,
                selectorLength = underPointer.content.length,
                context = context
            )
        }
        expectThenAdvance(Token.Type.L_FLOAT)
        return FloatLiteral(value)
    }

    fun parseBoolLiteral(): BoolLiteral
    {
        var value by Delegates.notNull<Boolean>()
        try
        {
            value = underPointer.content.toBooleanStrict()
        }
        catch(e: Exception)
        {
            Diagnostics.panic(
                "KiraParser::parseBoolLiteral",
                "Unable to read ${underPointer.content} as a bool literal",
                cause = e,
                location = underPointer.canonicalLocation,
                context = context
            )
        }
        expectAnyOfThenAdvance(arrayOf(Token.Type.L_TRUE_BOOL, Token.Type.L_FALSE_BOOL))
        return BoolLiteral(value)
    }

    fun parseFunctionLiteral(): AnonymousFunction
    {
        val params = parseFunctionParameters()
        expectThenAdvance(Token.Type.S_CLOSE_PARENTHESIS)
        expectThenAdvance(Token.Type.S_COLON)
        val returnType = parseType()
        var body: List<Statement>? = null
        when(underPointer.type)
        {
            Token.Type.S_OPEN_BRACE -> body = parseStatementBlock()
            else                    -> advancePointer()
        }
        return AnonymousFunction(returnType, params, body)
    }

    fun parseIdentifier(): Identifier
    {
        val value = underPointer.content
        expectThenAdvance(Token.Type.IDENTIFIER)
        return Identifier(value)
    }

    fun parseType(trace: Int = 0): TypeSpecifier
    {
        val baseName = underPointer.content
        expectThenAdvance(Token.Type.IDENTIFIER)
        val generics = mutableListOf<TypeSpecifier>()
        if(underPointer.type == Token.Type.S_OPEN_ANGLE)
        {
            advancePointer()
            while(true)
            {
                generics.add(parseType(trace + 1))
                if(underPointer.type == Token.Type.S_COMMA)
                {
                    advancePointer()
                    continue
                }
                break
            }

            expectThenAdvance(Token.Type.S_CLOSE_ANGLE)
        }
        return TypeSpecifier(baseName, generics.toTypedArray())
    }

    fun parseModifiers(): Map<Modifiers, FileLocation>
    {
        val modifiers = mutableMapOf<Modifiers, FileLocation>()
        while(underPointer.type in Token.Type.modifiers)
        {
            val currentModifier = Modifiers.byTokenTypeMaybe(underPointer.type) {
                Diagnostics.panic(
                    "KiraParser::parseModifiers",
                    "$underPointer is not a valid modifier",
                    context = context,
                    location = underPointer.canonicalLocation,
                    selectorLength = underPointer.content.length
                )
            }!!
            if(currentModifier in modifiers)
            {
                Diagnostics.panic(
                    "KiraParser::parseModifiers",
                    "The modifier ${currentModifier.tokenType.diagnosticsName()} was already specified at ${underPointer.canonicalLocation}. Remove the duplicate modifier.",
                    location = underPointer.canonicalLocation,
                    selectorLength = underPointer.content.length,
                    context = context
                )
            }
            modifiers[Modifiers.byTokenTypeMaybe(underPointer.type) {
                Diagnostics.panic(
                    "KiraParser::parseModifiers",
                    "$underPointer is not a valid modifier",
                    context = context,
                    location = underPointer.canonicalLocation,
                    selectorLength = underPointer.content.length
                )
            }!!] = underPointer.canonicalLocation
            advancePointer()
        }
        return modifiers
    }
}